---


name: Python File Resource
signature: resource/python_file
isa: Resource
description: |
    A special type of `resource file <Resources>` that contains Python source
    code.

    The file is executed when the experiment loads.  The execution takes place
    after all experiment-defined `variables <Variables>` have been created, but
    before any other components are created.  Therefore, the Python code can set
    variable values or perform additional initialization tasks, and other
    components can make use of the results.

    For information on the modules and functions available to your Python code,
    see `Run Python File`.
parameters: 
  - 
    name: path
    required: yes
    description: Filesystem path to the Python source file


---


name: Python Image Stimulus
signature: stimulus/python_image
isa: [Base Image Stimulus, Dynamic Stimulus Base]
description: |
    An image stimulus whose content is generated dynamically by Python code.

    Every time the stimulus draws, it evaluates the Python expression provided
    in `pixel_buffer_expr`_.  The result of evaluating the expression must be a
    `bytes-like object
    <https://docs.python.org/3/glossary.html#term-bytes-like-object>`_,
    typically a `bytes object
    <https://docs.python.org/3/library/stdtypes.html#bytes-objects>`_ or a
    C-style, contiguous `NumPy array
    <https://numpy.org/doc/stable/reference/arrays.ndarray.html>`_.  The raw
    bytes associated with the object must contain the image data, whose layout
    is specified by `pixel_buffer_format`_, `pixel_buffer_width`_, and
    `pixel_buffer_height`_.

    For information on the modules and functions available to your Python code,
    see `Run Python File`.

    *Note*:  To preserve the image's aspect ratio on screen, `x_size`_ and
    `y_size`_ must be equal.  When drawn, the larger dimension spans the full
    specified size, while the smaller dimension is scaled to maintain the
    aspect ratio.
parameters: 
  - 
    name: pixel_buffer_format
    required: yes
    options: [RGB8, sRGB8, RGBA8, sRGBA8, RGBA16F]
    description: |
        Pixel buffer format.

        The specified format determines how the stimulus interprets the data
        obtained by evaluating `pixel_buffer_expr`_.  The format name indicates
        the number and order of each pixel's color components.  ``R``, ``G``,
        and ``B`` refer to the pixel's red, green, and blue components,
        respectively, while ``A`` denotes the pixel's alpha channel, if any.
        The following table provides details on each supported format:

        =========== ==================== =================== ===================
        Format      Number of components Bytes per component Component data type
        =========== ==================== =================== ===================
        RGB8        3                    1                   Unsigned integer
        sRGB8       3                    1                   Unsigned integer
        RGBA8       4                    1                   Unsigned integer
        sRGBA8      4                    1                   Unsigned integer
        RGBA16F     4                    2                   Floating point
        =========== ==================== =================== ===================

        The total size, in bytes, of the data buffer provided by
        `pixel_buffer_expr`_ must be equal to the product of
        `pixel_buffer_width`_, `pixel_buffer_height`_, the number of components
        per pixel, and the number of bytes per component.  For example, if the
        format is ``RGBA16F``, the width is 400, and the height is 300, then the
        buffer size in bytes must be 400 * 300 * 4 * 2 = 960,000.

        1-byte, unsigned integer components must have values between 0 and 255,
        inclusive.  The values of floating-point components must lie between
        0.0 and 1.0, inclusive.  Multi-byte component values must be in native
        `byte order <https://en.wikipedia.org/wiki/Endianness>`_.

        A leading ``s`` in the format name indicates that the red, green, and
        blue component values are specified in the `sRGB color space
        <https://en.wikipedia.org/wiki/SRGB>`_.  Before these component values
        are used to draw the image, they are converted from sRGB's non-linear
        gamma to linear gamma.  Such formats should be preferred when using
        integer-valued pixels with color management enabled(see `mainScreenInfo
        var`).  When using integer-valued pixels with color management
        disabled, the non-``s`` formats should be used. Floating-point-valued
        pixels may be used with or without color management enabled.


  - 
    name: pixel_buffer_width
    required: yes
    example: 512
    description: Width of generated image in pixels
  - 
    name: pixel_buffer_height
    required: yes
    example: 512
    description: Height of generated image in pixels
  - 
    name: pixel_buffer_expr
    required: yes
    example:
      - render_scene()
      - img.update()
    description: |
        Pixel buffer expression.

        Must evaluate to either a `bytes-like object
        <https://docs.python.org/3/glossary.html#term-bytes-like-object>`_
        containing the current image data or ``None``.  If ``None``, the most
        recently provided image data is reused.
  - 
    name: elapsed_time
    description: |
        Name of a variable in which to store the elapsed time (in microseconds)
        since the stimulus started playing (either implicitly due to `autoplay`_
        being ``YES`` or via an explicit `Play Dynamic Stimulus` action).

        If the stimulus has been paused (e.g. via `Pause Dynamic Stimulus` or
        `Pause Experiment`), the time elapsed while paused is excluded from the
        reported elapsed time.
  - 
    name: autoplay
    default: 'YES'
    description: >
        If ``YES``, the stimulus will start playing automatically (as if by an
        implicit `Play Dynamic Stimulus` action) after it has been `queued
        <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It
        will also stop playing automatically (as if by an implicit `Stop Dynamic
        Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and
        `Update Stimulus Display` is invoked.


---


name: Run Python Action
abstract: yes
isa: Action
parameters: 
  - 
    name: stop_on_failure
    default: 'NO'
    description: >
        If ``YES``, the experiment will stop automatically if Python execution
        fails


---


name: Run Python File
signature: action/run_python_file
isa: Run Python Action
description: |
    Execute the specified file as `Python <https://www.python.org>`_ source
    code.

    .. rubric:: Available Modules and Functions

    Python code executed by `Run Python File`, `Run Python String`, a `Python
    File Resource`, a `Python Image Stimulus`, or the `expression parser
    <Expressions>` functions ``py_eval`` and ``py_call`` can make use of both
    the `Python standard library
    <https://docs.python.org/3/library/index.html>`_ and `NumPy
    <https://www.numpy.org>`_.  In addition, the following MWorks-specific
    functions are available:

    ``getvar(name)``
        Returns the value of an MWorks variable.  ``name`` is a string
        containing the name of the variable.

    ``setvar(name, value)``
        Sets the value of an MWorks variable.  ``name`` is a string containing
        the name of the variable, and ``value`` is the new value to assign.

    ``getcodec()``
        Returns the code-to-name mapping for variables (as a dictionary).

    ``get_reverse_codec()``
        Returns the name-to-code mapping for variables (as a dictionary).

    ``register_event_callback(name, callback)``
        Registers an event callback function for an MWorks variable.  ``name``
        is a string containing the name of the variable, and ``callback`` is a
        Python function as described below.

    ``register_event_callback(code, callback)``
        Registers an event callback function for an MWorks variable.  ``code``
        is the integer code corresponding to the variable, and ``callback`` is a
        Python function as described below.

    ``register_event_callback(callback)``
        Registers an event callback function for *all* MWorks variables.
        ``callback`` is a Python function as described below.  (*Note*: The
        callback function will be invoked very, very frequently.  Use with
        caution!)

    ``unregister_event_callbacks()``
        Unregisters all event callback functions previously registered via
        Python code.

    ``message(msg)``
        Generates a normal MWorks message (like `Report / Message`).  ``msg``
        can be any value, which, after conversion to a string, is used as the
        text of the message.

    ``warning(msg)``
        Generates an MWorks warning message.  ``msg`` can be any value, which,
        after conversion to a string, is used as the text of the message.

    ``error(msg)``
        Generates an MWorks error message.  ``msg`` can be any value, which,
        after conversion to a string, is used as the text of the message.

    Event callback functions are invoked whenever a value is assigned to the
    variable of interest.  They receive a single argument of type ``Event``,
    which has attributes ``code``, ``time``, and ``data``.  The values of
    ``code`` and ``time`` are always integers, while the value of ``data`` can
    be a boolean, integer, float, string, list, or dictionary.

    All MWorks-specific functions are pre-imported in to the ``__main__``
    module, in which the user-provided Python file or string executes.  To use
    them in other modules, import them from ``mworkscore``, e.g.

    .. code:: python

        from mworkscore import getvar, setvar

    .. rubric:: Execution Environment

    All user-provided Python code is executed within Python's ``__main__``
    module. This means that any variables, functions, classes, etc. defined by
    one Python action or resource file are available to all subsequent ones.

    Due to limitations in the Python interpreter, the Python environment is
    *not* reset when a new experiment is loaded.  If your Python code expects to
    run in a "clean slate" environment, it will have to perform the necessary
    cleanup actions itself.

    Also, event callback functions are never unregistered automatically.  They
    must be removed explicitly via ``unregister_event_callbacks()``.
parameters: 
  - 
    name: path
    required: yes
    description: Filesystem path to the Python source file


---


name: Run Python String
signature: action/run_python_string
isa: Run Python Action
description: |
    Execute the given string as `Python <https://www.python.org>`_ source code.

    For information on the modules and functions available to your Python code,
    see `Run Python File`.
parameters: 
  - 
    name: code
    required: yes
    description: Python code to execute


