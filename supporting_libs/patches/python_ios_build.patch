diff -ur Python-3.9.5/Lib/_osx_support.py Python/Lib/_osx_support.py
--- Python-3.9.5/Lib/_osx_support.py	2021-05-03 10:54:42.000000000 -0400
+++ Python/Lib/_osx_support.py	2021-06-28 12:23:39.000000000 -0400
@@ -385,11 +385,11 @@
             except ValueError:
                 break
 
-    elif not _supports_arm64_builds():
-        # Look for "-arch arm64" and drop that
-        for idx in reversed(range(len(compiler_so))):
-            if compiler_so[idx] == '-arch' and compiler_so[idx+1] == "arm64":
-                del compiler_so[idx:idx+2]
+    #elif not _supports_arm64_builds():
+    #    # Look for "-arch arm64" and drop that
+    #    for idx in reversed(range(len(compiler_so))):
+    #        if compiler_so[idx] == '-arch' and compiler_so[idx+1] == "arm64":
+    #            del compiler_so[idx:idx+2]
 
     if 'ARCHFLAGS' in os.environ and not stripArch:
         # User specified different -arch flags in the environ,
diff -ur Python-3.9.5/Modules/Setup Python/Modules/Setup
--- Python-3.9.5/Modules/Setup	2021-05-03 10:54:42.000000000 -0400
+++ Python/Modules/Setup	2021-06-28 12:07:02.000000000 -0400
@@ -173,7 +173,7 @@
 #cmath cmathmodule.c _math.c -DPy_BUILD_CORE_MODULE # -lm # complex math library functions
 #math mathmodule.c _math.c -DPy_BUILD_CORE_MODULE # -lm # math library functions, e.g. sin()
 #_contextvars _contextvarsmodule.c  # Context Variables
-#_struct _struct.c	# binary structure packing/unpacking
+_struct _struct.c	# binary structure packing/unpacking
 #_weakref _weakref.c	# basic weak reference support
 #_testcapi _testcapimodule.c    # Python C API test module
 #_testinternalcapi _testinternalcapi.c -I$(srcdir)/Include/internal -DPy_BUILD_CORE_MODULE  # Python internal C API test module
@@ -188,7 +188,7 @@
 #_json -I$(srcdir)/Include/internal -DPy_BUILD_CORE_BUILTIN _json.c	# _json speedups
 #_statistics _statisticsmodule.c # statistics accelerator
 
-#unicodedata unicodedata.c    # static Unicode character database
+unicodedata unicodedata.c    # static Unicode character database
 
 
 # Modules with some UNIX dependencies -- on by default:
diff -ur Python-3.9.5/Modules/posixmodule.c Python/Modules/posixmodule.c
--- Python-3.9.5/Modules/posixmodule.c	2021-05-03 10:54:42.000000000 -0400
+++ Python/Modules/posixmodule.c	2021-06-28 12:07:02.000000000 -0400
@@ -327,7 +327,7 @@
 #    define HAVE_KILL       1
 #    define HAVE_OPENDIR    1
 #    define HAVE_PIPE       1
-#    define HAVE_SYSTEM     1
+/* #    define HAVE_SYSTEM     1 */ /* system is prohibited on iOS */
 #    define HAVE_WAIT       1
 #    define HAVE_TTYNAME    1
 #  endif  /* _MSC_VER */
diff -ur Python-3.9.5/configure Python/configure
--- Python-3.9.5/configure	2021-05-03 10:54:42.000000000 -0400
+++ Python/configure	2021-06-28 12:07:02.000000000 -0400
@@ -2966,7 +2966,9 @@
 if test "$cross_compiling" = yes; then
     { $as_echo "$as_me:${as_lineno-$LINENO}: checking for python interpreter for cross build" >&5
 $as_echo_n "checking for python interpreter for cross build... " >&6; }
-    if test -z "$PYTHON_FOR_BUILD"; then
+    if test -n "$PYTHON_FOR_BUILD"; then
+        interp="$PYTHON_FOR_BUILD"
+    else
         for interp in python$PACKAGE_VERSION python3 python; do
 	    which $interp >/dev/null 2>&1 || continue
 	    if $interp -c "import sys;sys.exit(not '.'.join(str(n) for n in sys.version_info[:2]) == '$PACKAGE_VERSION')"; then
@@ -2979,8 +2981,8 @@
 	fi
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: $interp" >&5
 $as_echo "$interp" >&6; }
-	PYTHON_FOR_BUILD='_PYTHON_PROJECT_BASE=$(abs_builddir) _PYTHON_HOST_PLATFORM=$(_PYTHON_HOST_PLATFORM) PYTHONPATH=$(shell test -f pybuilddir.txt && echo $(abs_builddir)/`cat pybuilddir.txt`:)$(srcdir)/Lib _PYTHON_SYSCONFIGDATA_NAME=_sysconfigdata_$(ABIFLAGS)_$(MACHDEP)_$(MULTIARCH) '$interp
     fi
+	PYTHON_FOR_BUILD='_PYTHON_PROJECT_BASE=$(abs_builddir) _PYTHON_HOST_PLATFORM=$(_PYTHON_HOST_PLATFORM) PYTHONPATH=$(shell test -f pybuilddir.txt && echo $(abs_builddir)/`cat pybuilddir.txt`:)$(srcdir)/Lib _PYTHON_SYSCONFIGDATA_NAME=_sysconfigdata_$(ABIFLAGS)_$(MACHDEP)_$(MULTIARCH) '$interp
 elif test "$cross_compiling" = maybe; then
     as_fn_error $? "Cross compiling required --host=HOST-TUPLE and --build=ARCH" "$LINENO" 5
 else
@@ -3037,7 +3039,7 @@
 
 
 
-define_xopen_source=yes
+define_xopen_source=no
 
 # Arguments passed to configure.
 
@@ -3304,6 +3306,9 @@
 	*-*-cygwin*)
 		ac_sys_system=Cygwin
 		;;
+	*-*-darwin*)
+		ac_sys_system=Darwin
+		;;
 	*-*-vxworks*)
 	    ac_sys_system=VxWorks
 	    ;;
@@ -3354,6 +3359,9 @@
 	*-*-cygwin*)
 		_host_cpu=
 		;;
+	*-*-darwin*)
+		_host_cpu=$host_cpu
+		;;
 	*-*-vxworks*)
 		_host_cpu=$host_cpu
 		;;
@@ -6208,13 +6216,13 @@
   fi
 fi
 
-if test "$cross_compiling" = yes; then
-    case "$READELF" in
-	readelf|:)
-	as_fn_error $? "readelf for the host is required for cross builds" "$LINENO" 5
-	;;
-    esac
-fi
+#if test "$cross_compiling" = yes; then
+#    case "$READELF" in
+#	readelf|:)
+#	as_fn_error $? "readelf for the host is required for cross builds" "$LINENO" 5
+#	;;
+#    esac
+#fi
 
 
 
diff -ur Python-3.9.5/pyconfig.h.in Python/pyconfig.h.in
--- Python-3.9.5/pyconfig.h.in	2021-05-03 10:54:42.000000000 -0400
+++ Python/pyconfig.h.in	2021-06-28 12:07:02.000000000 -0400
@@ -134,7 +134,7 @@
 #undef HAVE_CLOCK_GETTIME
 
 /* Define to 1 if you have the `clock_settime' function. */
-#undef HAVE_CLOCK_SETTIME
+/* #undef HAVE_CLOCK_SETTIME */ /* clock_settime is prohibited on iOS */
 
 /* Define if the C compiler supports computed gotos. */
 #undef HAVE_COMPUTED_GOTOS
diff -ur Python-3.9.5/setup.py Python/setup.py
--- Python-3.9.5/setup.py	2021-05-03 10:54:42.000000000 -0400
+++ Python/setup.py	2021-06-28 12:07:02.000000000 -0400
@@ -50,6 +50,8 @@
 def get_platform():
     # Cross compiling
     if "_PYTHON_HOST_PLATFORM" in os.environ:
+        if os.environ["_PYTHON_HOST_PLATFORM"].startswith('darwin'):
+            return 'darwin'
         return os.environ["_PYTHON_HOST_PLATFORM"]
 
     # Get value of sys.platform
@@ -139,7 +141,10 @@
     for var_name in make_vars:
         var = sysconfig.get_config_var(var_name)
         if var is not None:
-            m = re.search(r'--sysroot=([^"]\S*|"[^"]+")', var)
+            if MACOS:
+                m = re.search(r'-isysroot\s+(\S+)', var)
+            else:
+                m = re.search(r'--sysroot=([^"]\S*|"[^"]+")', var)
             if m is not None:
                 sysroot = m.group(1).strip('"')
                 for subdir in subdirs:
