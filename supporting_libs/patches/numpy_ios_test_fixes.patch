diff -ur numpy-1.26.2/numpy/core/tests/test_regression.py numpy/numpy/core/tests/test_regression.py
--- numpy-1.26.2/numpy/core/tests/test_regression.py	1969-12-31 19:00:00
+++ numpy/numpy/core/tests/test_regression.py	2023-11-21 11:49:57
@@ -2479,6 +2479,7 @@
         arr = np.array([t])
         assert arr.shape == (1, 0, 0)
 
+    @pytest.mark.skip('memory allocation fails on iOS')
     @pytest.mark.skipif(sys.maxsize < 2 ** 31 + 1, reason='overflows 32-bit python')
     def test_to_ctypes(self):
         #gh-14214
diff -ur numpy-1.26.2/numpy/distutils/system_info.py numpy/numpy/distutils/system_info.py
--- numpy-1.26.2/numpy/distutils/system_info.py	1969-12-31 19:00:00
+++ numpy/numpy/distutils/system_info.py	2023-11-21 11:51:51
@@ -352,6 +352,7 @@
 
     with open(os.devnull, 'w') as tmp:
         try:
+            raise OSError('no compilers available on iOS')
             p = subprocess.Popen(["gcc", "-print-multiarch"], stdout=subprocess.PIPE,
                          stderr=tmp)
         except (OSError, DistutilsError):
diff -ur numpy-1.26.2/numpy/distutils/tests/test_fcompiler_gnu.py numpy/numpy/distutils/tests/test_fcompiler_gnu.py
--- numpy-1.26.2/numpy/distutils/tests/test_fcompiler_gnu.py	1969-12-31 19:00:00
+++ numpy/numpy/distutils/tests/test_fcompiler_gnu.py	2023-11-21 11:49:57
@@ -1,3 +1,5 @@
+import pytest
+
 from numpy.testing import assert_
 
 import numpy.distutils.fcompiler
@@ -28,6 +30,7 @@
     ('GNU Fortran (crosstool-NG 8a21ab48) 7.2.0', '7.2.0')
 ]
 
+@pytest.mark.skip('no compilers available on iOS')
 class TestG77Versions:
     def test_g77_version(self):
         fc = numpy.distutils.fcompiler.new_fcompiler(compiler='gnu')
@@ -41,6 +44,7 @@
             v = fc.version_match(vs)
             assert_(v is None, (vs, v))
 
+@pytest.mark.skip('no compilers available on iOS')
 class TestGFortranVersions:
     def test_gfortran_version(self):
         fc = numpy.distutils.fcompiler.new_fcompiler(compiler='gnu95')
diff -ur numpy-1.26.2/numpy/distutils/tests/test_fcompiler_intel.py numpy/numpy/distutils/tests/test_fcompiler_intel.py
--- numpy-1.26.2/numpy/distutils/tests/test_fcompiler_intel.py	1969-12-31 19:00:00
+++ numpy/numpy/distutils/tests/test_fcompiler_intel.py	2023-11-21 11:49:57
@@ -1,3 +1,5 @@
+import pytest
+
 import numpy.distutils.fcompiler
 from numpy.testing import assert_
 
@@ -14,6 +16,7 @@
      "running on Intel(R) 64, Version 11.1", '11.1')
 ]
 
+@pytest.mark.skip('no compilers available on iOS')
 class TestIntelFCompilerVersions:
     def test_32bit_version(self):
         fc = numpy.distutils.fcompiler.new_fcompiler(compiler='intel')
@@ -22,6 +25,7 @@
             assert_(v == version)
 
 
+@pytest.mark.skip('no compilers available on iOS')
 class TestIntelEM64TFCompilerVersions:
     def test_64bit_version(self):
         fc = numpy.distutils.fcompiler.new_fcompiler(compiler='intelem')
diff -ur numpy-1.26.2/numpy/distutils/tests/test_fcompiler_nagfor.py numpy/numpy/distutils/tests/test_fcompiler_nagfor.py
--- numpy-1.26.2/numpy/distutils/tests/test_fcompiler_nagfor.py	1969-12-31 19:00:00
+++ numpy/numpy/distutils/tests/test_fcompiler_nagfor.py	2023-11-21 11:49:57
@@ -1,3 +1,5 @@
+import pytest
+
 from numpy.testing import assert_
 import numpy.distutils.fcompiler
 
@@ -14,6 +16,7 @@
                         '431,435,437,446,459-460,463,472,494,496,503,508,'
                         '511,517,529,555,557,565)', '5.1')]
 
+@pytest.mark.skip('no compilers available on iOS')
 class TestNagFCompilerVersions:
     def test_version_match(self):
         for comp, vs, version in nag_version_strings:
diff -ur numpy-1.26.2/numpy/f2py/tests/test_array_from_pyobj.py numpy/numpy/f2py/tests/test_array_from_pyobj.py
--- numpy-1.26.2/numpy/f2py/tests/test_array_from_pyobj.py	1969-12-31 19:00:00
+++ numpy/numpy/f2py/tests/test_array_from_pyobj.py	2023-11-21 12:01:31
@@ -162,7 +162,10 @@
 # Furthermore, on macOS ARM64, LONGDOUBLE is an alias for DOUBLE.
 if ((np.intp().dtype.itemsize != 4 or np.clongdouble().dtype.alignment <= 8)
         and sys.platform != "win32"
-        and (platform.system(), platform.processor()) != ("Darwin", "arm")):
+        # platform.processor tries to open a subprocess, which isn't allowed
+        # on iOS
+        #and (platform.system(), platform.processor()) != ("Darwin", "arm")):
+        and False):
     _type_names.extend(["LONGDOUBLE", "CDOUBLE", "CLONGDOUBLE"])
     _cast_dict["LONGDOUBLE"] = _cast_dict["LONG"] + [
         "ULONG",
diff -ur numpy-1.26.2/numpy/lib/tests/test_io.py numpy/numpy/lib/tests/test_io.py
--- numpy-1.26.2/numpy/lib/tests/test_io.py	1969-12-31 19:00:00
+++ numpy/numpy/lib/tests/test_io.py	2023-11-21 11:49:57
@@ -203,6 +203,7 @@
                 self.arr_reloaded.fid.close()
                 os.remove(self.arr_reloaded.fid.name)
 
+    @pytest.mark.skip('fails on iOS')
     @pytest.mark.skipif(IS_PYPY, reason="Hangs on PyPy")
     @pytest.mark.skipif(not IS_64BIT, reason="Needs 64bit platform")
     @pytest.mark.slow
diff -ur numpy-1.26.2/numpy/testing/_private/utils.py numpy/numpy/testing/_private/utils.py
--- numpy-1.26.2/numpy/testing/_private/utils.py	1969-12-31 19:00:00
+++ numpy/numpy/testing/_private/utils.py	2023-11-21 11:49:57
@@ -1241,6 +1241,8 @@
     gh-22982
     """
     
+    # Can't open a subprocess on iOS
+    return False
     import subprocess
     cmd = 'lscpu'
     try:
