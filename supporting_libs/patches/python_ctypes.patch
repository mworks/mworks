diff -ur Python-3.8.0/Lib/test/test_bytes.py Python/Lib/test/test_bytes.py
--- Python-3.8.0/Lib/test/test_bytes.py	2019-10-14 09:34:47.000000000 -0400
+++ Python/Lib/test/test_bytes.py	2019-11-01 14:28:04.000000000 -0400
@@ -957,6 +957,7 @@
         _testcapi = test.support.import_module('_testcapi')
         from ctypes import pythonapi, py_object
         from ctypes import (
+            POINTER, c_char,
             c_int, c_uint,
             c_long, c_ulong,
             c_size_t, c_ssize_t,
@@ -964,6 +965,9 @@
 
         PyBytes_FromFormat = pythonapi.PyBytes_FromFormat
         PyBytes_FromFormat.restype = py_object
+        # Without argtypes, this test corrupts memory and may crash the
+        # interpreter on iOS
+        PyBytes_FromFormat.argtypes = (POINTER(c_char),)
 
         # basic tests
         self.assertEqual(PyBytes_FromFormat(b'format'),
diff -ur Python-3.8.0/Lib/test/test_unicode.py Python/Lib/test/test_unicode.py
--- Python-3.8.0/Lib/test/test_unicode.py	2019-10-14 09:34:47.000000000 -0400
+++ Python/Lib/test/test_unicode.py	2019-11-01 14:28:04.000000000 -0400
@@ -2455,11 +2455,15 @@
         support.import_module('ctypes')
         from ctypes import (
             pythonapi, py_object, sizeof,
+            POINTER, c_char,
             c_int, c_long, c_longlong, c_ssize_t,
             c_uint, c_ulong, c_ulonglong, c_size_t, c_void_p)
         name = "PyUnicode_FromFormat"
         _PyUnicode_FromFormat = getattr(pythonapi, name)
         _PyUnicode_FromFormat.restype = py_object
+        # Without argtypes, this test corrupts memory and may crash the
+        # interpreter on iOS
+        _PyUnicode_FromFormat.argtypes = (POINTER(c_char),)
 
         def PyUnicode_FromFormat(format, *args):
             cargs = tuple(
diff -ur Python-3.8.0/Modules/_ctypes/callproc.c Python/Modules/_ctypes/callproc.c
--- Python-3.8.0/Modules/_ctypes/callproc.c	2019-10-14 09:34:47.000000000 -0400
+++ Python/Modules/_ctypes/callproc.c	2019-11-01 14:28:04.000000000 -0400
@@ -795,7 +795,8 @@
                                   ffi_type **atypes,
                                   ffi_type *restype,
                                   void *resmem,
-                                  int argcount)
+                                  int fixedargcount,
+                                  int totalargcount)
 {
     PyThreadState *_save = NULL; /* For Py_BLOCK_THREADS and Py_UNBLOCK_THREADS */
     PyObject *error_object = NULL;
@@ -818,9 +819,22 @@
     if ((flags & FUNCFLAG_CDECL) == 0)
         cc = FFI_STDCALL;
 #endif
+    assert(totalargcount >= fixedargcount);
+    if (totalargcount > fixedargcount) {
+        if (FFI_OK != ffi_prep_cif_var(&cif,
+                                       cc,
+                                       fixedargcount,
+                                       totalargcount,
+                                       restype,
+                                       atypes)) {
+            PyErr_SetString(PyExc_RuntimeError,
+                            "ffi_prep_cif_var failed");
+            return -1;
+        }
+    } else
     if (FFI_OK != ffi_prep_cif(&cif,
                                cc,
-                               argcount,
+                               fixedargcount,
                                restype,
                                atypes)) {
         PyErr_SetString(PyExc_RuntimeError,
@@ -1180,6 +1194,11 @@
 
     if (-1 == _call_function_pointer(flags, pProc, avalues, atypes,
                                      rtype, resbuf,
+                                     Py_SAFE_DOWNCAST((argtype_count ?
+                                                       argtype_count :
+                                                       argcount),
+                                                      Py_ssize_t,
+                                                      int),
                                      Py_SAFE_DOWNCAST(argcount,
                                                       Py_ssize_t,
                                                       int)))
diff -ur Python-3.8.0/setup.py Python/setup.py
--- Python-3.8.0/setup.py	2019-10-14 09:34:47.000000000 -0400
+++ Python/setup.py	2019-11-01 14:27:24.000000000 -0400
@@ -1957,6 +1957,12 @@
         return True
 
     def configure_ctypes_darwin(self, ext):
+        # Use our libffi, not the one included with Python
+        ext.include_dirs.append(sysconfig.get_config_var('INCLUDEDIR'))
+        ext.library_dirs.append(sysconfig.get_config_var('LIBDIR'))
+        ext.libraries.append('ffi')
+        return True
+
         # Darwin (OS X) uses preconfigured files, in
         # the Modules/_ctypes/libffi_osx directory.
         ffi_srcdir = os.path.abspath(os.path.join(self.srcdir, 'Modules',
@@ -2003,7 +2009,10 @@
                    '_ctypes/cfield.c']
         depends = ['_ctypes/ctypes.h']
 
-        if MACOS:
+        # These files aren't necessary, and including them makes ctypes
+        # callbacks crash the interpreter on iOS
+        #if MACOS:
+        if False:
             sources.append('_ctypes/malloc_closure.c')
             sources.append('_ctypes/darwin/dlfcn_simple.c')
             extra_compile_args.append('-DMACOSX')
