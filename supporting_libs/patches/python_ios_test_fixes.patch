diff -ur Python-3.12.3/Lib/test/libregrtest/utils.py Python/Lib/test/libregrtest/utils.py
--- Python-3.12.3/Lib/test/libregrtest/utils.py	2024-04-09 04:09:14
+++ Python/Lib/test/libregrtest/utils.py	2024-05-06 14:12:25
@@ -603,8 +603,8 @@
                    python_cmd: tuple[str, ...] | None):
     # Print basic platform information
     print("==", platform.python_implementation(), *sys.version.split())
-    print("==", platform.platform(aliased=True),
-                  "%s-endian" % sys.byteorder)
+    #print("==", platform.platform(aliased=True),
+    #              "%s-endian" % sys.byteorder)
     print("== Python build:", ' '.join(get_build_info()))
     print("== cwd:", os.getcwd())
 
diff -ur Python-3.12.3/Lib/test/support/__init__.py Python/Lib/test/support/__init__.py
--- Python-3.12.3/Lib/test/support/__init__.py	2024-04-09 04:09:14
+++ Python/Lib/test/support/__init__.py	2024-05-06 14:12:25
@@ -540,12 +540,14 @@
 is_emscripten = sys.platform == "emscripten"
 is_wasi = sys.platform == "wasi"
 
-has_fork_support = hasattr(os, "fork") and not is_emscripten and not is_wasi
+#has_fork_support = hasattr(os, "fork") and not is_emscripten and not is_wasi
+has_fork_support = False
 
 def requires_fork():
     return unittest.skipUnless(has_fork_support, "requires working os.fork()")
 
-has_subprocess_support = not is_emscripten and not is_wasi
+#has_subprocess_support = not is_emscripten and not is_wasi
+has_subprocess_support = False
 
 def requires_subprocess():
     """Used for subprocess, os.spawn calls, fd inheritance"""
diff -ur Python-3.12.3/Lib/test/test__osx_support.py Python/Lib/test/test__osx_support.py
--- Python-3.12.3/Lib/test/test__osx_support.py	2024-04-09 04:09:14
+++ Python/Lib/test/test__osx_support.py	2024-05-06 14:12:25
@@ -105,6 +105,7 @@
         _osx_support._save_modified_value(config_vars, cv, newvalue)
         self.assertEqual(expected_vars, config_vars)
 
+    @unittest.skip('irrelevant on iOS')
     def test__supports_universal_builds(self):
         import platform
         mac_ver_tuple = tuple(int(i) for i in
diff -ur Python-3.12.3/Lib/test/test_asyncio/test_events.py Python/Lib/test/test_asyncio/test_events.py
--- Python-3.12.3/Lib/test/test_asyncio/test_events.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_asyncio/test_events.py	2024-05-06 14:12:25
@@ -443,6 +443,7 @@
         r.close()
         self.assertEqual(read, data)
 
+    @unittest.skip('crashes the interpreter on iOS')
     @unittest.skipUnless(hasattr(signal, 'SIGKILL'), 'No SIGKILL')
     def test_add_signal_handler(self):
         caught = 0
diff -ur Python-3.12.3/Lib/test/test_concurrent_futures/util.py Python/Lib/test/test_concurrent_futures/util.py
--- Python-3.12.3/Lib/test/test_concurrent_futures/util.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_concurrent_futures/util.py	2024-05-06 14:14:50
@@ -79,6 +79,7 @@
     ctx = "fork"
 
     def get_context(self):
+        self.skipTest('fork is not allowed on iOS')
         try:
             _check_system_limits()
         except NotImplementedError:
@@ -95,6 +96,7 @@
     ctx = "spawn"
 
     def get_context(self):
+        self.skipTest('spawn is not allowed on iOS')
         try:
             _check_system_limits()
         except NotImplementedError:
@@ -107,6 +109,7 @@
     ctx = "forkserver"
 
     def get_context(self):
+        self.skipTest('fork is not allowed on iOS')
         try:
             _check_system_limits()
         except NotImplementedError:
diff -ur Python-3.12.3/Lib/test/test_ctypes/test_macholib.py Python/Lib/test/test_ctypes/test_macholib.py
--- Python-3.12.3/Lib/test/test_ctypes/test_macholib.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_ctypes/test_macholib.py	2024-05-06 14:12:25
@@ -51,6 +51,7 @@
 
 
 class MachOTest(unittest.TestCase):
+    @unittest.skip('fails on iOS')
     @unittest.skipUnless(sys.platform == "darwin", 'OSX-specific test')
     def test_find(self):
         self.assertEqual(dyld_find('libSystem.dylib'),
diff -ur Python-3.12.3/Lib/test/test_doctest/test_doctest.py Python/Lib/test/test_doctest/test_doctest.py
--- Python-3.12.3/Lib/test/test_doctest/test_doctest.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_doctest/test_doctest.py	2024-05-06 14:16:15
@@ -18,8 +18,8 @@
 import contextlib
 
 
-if not support.has_subprocess_support:
-    raise unittest.SkipTest("test_CLI requires subprocess support.")
+#if not support.has_subprocess_support:
+#    raise unittest.SkipTest("test_CLI requires subprocess support.")
 
 
 # NOTE: There are some additional tests relating to interaction with
@@ -3139,6 +3139,9 @@
     usage...invalid...nosuchoption...
 
 """
+
+# test_CLI spawns a subprocess, which isn't allowed on iOS
+del test_CLI
 
 def test_no_trailing_whitespace_stripping():
     r"""
diff -ur Python-3.12.3/Lib/test/test_httpservers.py Python/Lib/test/test_httpservers.py
--- Python-3.12.3/Lib/test/test_httpservers.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_httpservers.py	2024-05-06 14:16:15
@@ -696,6 +696,7 @@
 """
 
 
+@unittest.skip('subprocesses are not allowed on iOS')
 @unittest.skipIf(hasattr(os, 'geteuid') and os.geteuid() == 0,
         "This test can't be run reliably as root (issue #13308).")
 class CGIHTTPServerTestCase(BaseTestCase):
diff -ur Python-3.12.3/Lib/test/test_json/test_tool.py Python/Lib/test/test_json/test_tool.py
--- Python-3.12.3/Lib/test/test_json/test_tool.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_json/test_tool.py	2024-05-06 14:17:13
@@ -201,8 +201,8 @@
     def test_no_ensure_ascii_flag(self):
         infile = self._create_infile('{"key":"ðŸ’©"}')
         outfile = os_helper.TESTFN + '.out'
-        self.addCleanup(os.remove, outfile)
         assert_python_ok('-m', 'json.tool', '--no-ensure-ascii', infile, outfile)
+        self.addCleanup(os.remove, outfile)
         with open(outfile, "rb") as f:
             lines = f.read().splitlines()
         # asserting utf-8 encoded output file
@@ -212,8 +212,8 @@
     def test_ensure_ascii_default(self):
         infile = self._create_infile('{"key":"ðŸ’©"}')
         outfile = os_helper.TESTFN + '.out'
-        self.addCleanup(os.remove, outfile)
         assert_python_ok('-m', 'json.tool', infile, outfile)
+        self.addCleanup(os.remove, outfile)
         with open(outfile, "rb") as f:
             lines = f.read().splitlines()
         # asserting an ascii encoded output file
diff -ur Python-3.12.3/Lib/test/test_logging.py Python/Lib/test/test_logging.py
--- Python-3.12.3/Lib/test/test_logging.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_logging.py	2024-05-06 14:17:13
@@ -2105,6 +2105,8 @@
         self.assertEqual(self.log_output, b'<11>h\xc3\xa4m-sp\xc3\xa4m')
 
     def test_udp_reconnection(self):
+        if self.server_exception:
+            self.skipTest(self.server_exception)
         logger = logging.getLogger("slh")
         self.sl_hdlr.close()
         self.handled.clear()
diff -ur Python-3.12.3/Lib/test/test_marshal.py Python/Lib/test/test_marshal.py
--- Python-3.12.3/Lib/test/test_marshal.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_marshal.py	2024-05-06 14:17:13
@@ -232,6 +232,7 @@
             except Exception:
                 pass
 
+    @unittest.skip('crashes the interpreter on iOS')
     def test_loads_recursion(self):
         def run_tests(N, check):
             # (((...None...),),)
@@ -251,6 +252,7 @@
             self.assertRaises(ValueError, marshal.loads, s)
         run_tests(2**20, check)
 
+    @unittest.skip('crashes the interpreter on iOS')
     def test_recursion_limit(self):
         # Create a deeply nested structure.
         head = last = []
diff -ur Python-3.12.3/Lib/test/test_mmap.py Python/Lib/test/test_mmap.py
--- Python-3.12.3/Lib/test/test_mmap.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_mmap.py	2024-05-06 14:17:13
@@ -1045,6 +1045,7 @@
     # Issue 11277: mmap() with large (~4 GiB) sparse files crashes on OS X.
 
     def _test_around_boundary(self, boundary):
+        self.skipTest('memory allocation fails on iOS')
         tail = b'  DEARdear  '
         start = boundary - len(tail) // 2
         end = start + len(tail)
diff -ur Python-3.12.3/Lib/test/test_multiprocessing_fork/__init__.py Python/Lib/test/test_multiprocessing_fork/__init__.py
--- Python-3.12.3/Lib/test/test_multiprocessing_fork/__init__.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_multiprocessing_fork/__init__.py	2024-05-06 14:18:54
@@ -3,6 +3,8 @@
 import unittest
 from test import support
 
+raise unittest.SkipTest('subprocesses are not allowed on iOS')
+
 if support.PGO:
     raise unittest.SkipTest("test is not helpful for PGO")
 
diff -ur Python-3.12.3/Lib/test/test_multiprocessing_forkserver/__init__.py Python/Lib/test/test_multiprocessing_forkserver/__init__.py
--- Python-3.12.3/Lib/test/test_multiprocessing_forkserver/__init__.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_multiprocessing_forkserver/__init__.py	2024-05-06 14:19:23
@@ -3,6 +3,8 @@
 import unittest
 from test import support
 
+raise unittest.SkipTest('subprocesses are not allowed on iOS')
+
 if support.PGO:
     raise unittest.SkipTest("test is not helpful for PGO")
 
diff -ur Python-3.12.3/Lib/test/test_multiprocessing_main_handling.py Python/Lib/test/test_multiprocessing_main_handling.py
--- Python-3.12.3/Lib/test/test_multiprocessing_main_handling.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_multiprocessing_main_handling.py	2024-05-06 14:19:23
@@ -17,6 +17,8 @@
     make_pkg, make_script, make_zip_pkg, make_zip_script,
     assert_python_ok)
 
+raise unittest.SkipTest('subprocesses are not allowed on iOS')
+
 if support.PGO:
     raise unittest.SkipTest("test is not helpful for PGO")
 
diff -ur Python-3.12.3/Lib/test/test_multiprocessing_spawn/__init__.py Python/Lib/test/test_multiprocessing_spawn/__init__.py
--- Python-3.12.3/Lib/test/test_multiprocessing_spawn/__init__.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_multiprocessing_spawn/__init__.py	2024-05-06 14:19:48
@@ -2,6 +2,8 @@
 import unittest
 from test import support
 
+raise unittest.SkipTest('subprocesses are not allowed on iOS')
+
 if support.PGO:
     raise unittest.SkipTest("test is not helpful for PGO")
 
diff -ur Python-3.12.3/Lib/test/test_os.py Python/Lib/test/test_os.py
--- Python-3.12.3/Lib/test/test_os.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_os.py	2024-05-06 14:19:48
@@ -2287,6 +2287,7 @@
     def test_isatty(self):
         self.assertEqual(os.isatty(os_helper.make_bad_fd()), False)
 
+    @unittest.skip('breaks communication with Xcode on iOS')
     @unittest.skipUnless(hasattr(os, 'closerange'), 'test needs os.closerange()')
     def test_closerange(self):
         fd = os_helper.make_bad_fd()
@@ -3552,6 +3553,7 @@
         self.assertNotEqual(len(user_name), 0)
 
 
+@unittest.skip('fails on iOS')
 @unittest.skipUnless(hasattr(os, 'getpriority') and hasattr(os, 'setpriority'),
                      "needs os.getpriority and os.setpriority")
 class ProgramPriorityTests(unittest.TestCase):
@@ -3894,6 +3896,7 @@
         self._check_xattrs(getxattr, setxattr, removexattr, listxattr)
 
 
+@unittest.skip('fails on iOS')
 @unittest.skipUnless(hasattr(os, 'get_terminal_size'), "requires os.get_terminal_size")
 class TermsizeTests(unittest.TestCase):
     def test_does_not_crash(self):
diff -ur Python-3.12.3/Lib/test/test_shutil.py Python/Lib/test/test_shutil.py
--- Python-3.12.3/Lib/test/test_shutil.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_shutil.py	2024-05-06 14:19:48
@@ -2137,17 +2137,20 @@
             return s.decode()
         return s
 
+    @unittest.skip('fails on iOS')
     def test_basic(self):
         # Given an EXE in a directory, it should be returned.
         rv = shutil.which(self.file, path=self.dir)
         self.assertEqual(rv, self.temp_file.name)
 
+    @unittest.skip('fails on iOS')
     def test_absolute_cmd(self):
         # When given the fully qualified path to an executable that exists,
         # it should be returned.
         rv = shutil.which(self.temp_file.name, path=self.temp_dir)
         self.assertEqual(rv, self.temp_file.name)
 
+    @unittest.skip('fails on iOS')
     def test_relative_cmd(self):
         # When given the relative path with a directory part to an executable
         # that exists, it should be returned.
@@ -2232,6 +2235,7 @@
         rv = shutil.which(self.file, path=self.dir, mode=os.W_OK)
         self.assertIsNone(rv)
 
+    @unittest.skip('fails on iOS')
     def test_relative_path(self):
         base_dir, tail_dir = os.path.split(self.dir)
         with os_helper.change_cwd(path=base_dir):
@@ -2251,6 +2255,7 @@
         rv = shutil.which(self.file[:-4], path=self.dir)
         self.assertEqual(rv, self.temp_file.name[:-4] + self.ext)
 
+    @unittest.skip('fails on iOS')
     def test_environ_path(self):
         with os_helper.EnvironmentVarGuard() as env:
             env['PATH'] = self.env_path
@@ -2268,6 +2273,7 @@
                 rv = shutil.which(self.file)
                 self.assertIsNone(rv)
 
+    @unittest.skip('fails on iOS')
     def test_environ_path_cwd(self):
         expected_cwd = os.path.basename(self.temp_file.name)
         if sys.platform == "win32":
@@ -2290,6 +2296,7 @@
                     rv = shutil.which(self.file)
                     self.assertEqual(rv, expected_cwd)
 
+    @unittest.skip('fails on iOS')
     def test_environ_path_missing(self):
         with os_helper.EnvironmentVarGuard() as env:
             env.pop('PATH', None)
diff -ur Python-3.12.3/Lib/test/test_socket.py Python/Lib/test/test_socket.py
--- Python-3.12.3/Lib/test/test_socket.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_socket.py	2024-05-06 14:34:38
@@ -688,7 +688,10 @@
     def bindSock(self, sock):
         path = socket_helper.create_unix_domain_name()
         self.addCleanup(os_helper.unlink, path)
-        socket_helper.bind_unix_socket(sock, path)
+        origdir = os.getcwd()
+        os.chdir(os.path.dirname(path))
+        self.addCleanup(os.chdir, origdir)
+        socket_helper.bind_unix_socket(sock, os.path.basename(path))
 
 class UnixStreamBase(UnixSocketTestBase):
     """Base class for Unix-domain SOCK_STREAM tests."""
@@ -1982,11 +1985,14 @@
         if hasattr(socket, "AF_UNIX"):
             unix_name = socket_helper.create_unix_domain_name()
             self.addCleanup(os_helper.unlink, unix_name)
+            origdir = os.getcwd()
+            os.chdir(os.path.dirname(unix_name))
+            self.addCleanup(os.chdir, origdir)
 
             s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
             with s:
                 try:
-                    s.bind(unix_name)
+                    s.bind(os.path.basename(unix_name))
                 except PermissionError:
                     pass
                 else:
diff -ur Python-3.12.3/Lib/test/test_socketserver.py Python/Lib/test/test_socketserver.py
--- Python-3.12.3/Lib/test/test_socketserver.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_socketserver.py	2024-05-06 14:25:25
@@ -83,8 +83,13 @@
             # XXX: We need a way to tell AF_UNIX to pick its own name
             # like AF_INET provides port==0.
             fn = socket_helper.create_unix_domain_name()
-            self.test_files.append(fn)
-            return fn
+            #self.test_files.append(fn)
+            #return fn
+            self.addCleanup(os.unlink, fn)
+            origdir = os.getcwd()
+            os.chdir(os.path.dirname(fn))
+            self.addCleanup(os.chdir, origdir)
+            return os.path.basename(fn)
 
     def make_server(self, addr, svrcls, hdlrbase):
         class MyServer(svrcls):
diff -ur Python-3.12.3/Lib/test/test_support.py Python/Lib/test/test_support.py
--- Python-3.12.3/Lib/test/test_support.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_support.py	2024-05-08 11:21:49
@@ -550,6 +550,7 @@
             with self.subTest(opts=opts):
                 self.check_options(opts, 'optim_args_from_interpreter_flags')
 
+    @unittest.skip('crashes the interpreter on iOS')
     @unittest.skipIf(support.is_emscripten, "Unstable in Emscripten")
     @unittest.skipIf(support.is_wasi, "Unavailable on WASI")
     def test_fd_count(self):
diff -ur Python-3.12.3/Lib/test/test_thread.py Python/Lib/test/test_thread.py
--- Python-3.12.3/Lib/test/test_thread.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_thread.py	2024-05-06 14:19:48
@@ -227,6 +227,7 @@
     locktype = thread.allocate_lock
 
 
+@unittest.skip('fork is not allowed on iOS')
 class TestForkInThread(unittest.TestCase):
     def setUp(self):
         self.read_fd, self.write_fd = os.pipe()
diff -ur Python-3.12.3/Lib/test/test_time.py Python/Lib/test/test_time.py
--- Python-3.12.3/Lib/test/test_time.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_time.py	2024-05-06 14:19:48
@@ -1134,8 +1134,9 @@
         mac_ver = tuple(int(x) for x in platform.mac_ver()[0].split("."))
 
         clock_names = [
-            "CLOCK_MONOTONIC", "clock_gettime", "clock_gettime_ns", "clock_settime",
-            "clock_settime_ns", "clock_getres"]
+        #    "CLOCK_MONOTONIC", "clock_gettime", "clock_gettime_ns", "clock_settime",
+        #    "clock_settime_ns", "clock_getres"]
+            "CLOCK_MONOTONIC", "clock_gettime", "clock_gettime_ns", "clock_getres"]
 
         if mac_ver >= (10, 12):
             for name in clock_names:
diff -ur Python-3.12.3/Lib/test/test_zipfile/test_core.py Python/Lib/test/test_zipfile/test_core.py
--- Python-3.12.3/Lib/test/test_zipfile/test_core.py	2024-04-09 04:09:14
+++ Python/Lib/test/test_zipfile/test_core.py	2024-05-06 14:20:43
@@ -3092,6 +3092,7 @@
             self.assertFalse(zi.is_dir())
             self.assertEqual(zi.file_size, os.path.getsize(__file__))
 
+    @unittest.skip('fails on iOS')
     def test_from_dir(self):
         dirpath = os.path.dirname(os.path.abspath(__file__))
         zi = zipfile.ZipInfo.from_file(dirpath, 'stdlib_tests')
