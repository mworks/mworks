#!/usr/bin/env python3

import argparse
import os
import string
from subprocess import check_call, check_output


xcrun = '/usr/bin/xcrun'
workspace = 'MWorks-iOS.xcworkspace'
destination = 'generic/platform=iOS'


def build(archive, version):
    cmd = [
        xcrun,
        'xcodebuild',
        '-workspace', workspace,
        '-scheme', 'MWorks',
        '-destination', destination,
        ]

    if archive:
        cmd.append('archive')
    else:
        cmd.extend(['clean', 'build'])

    cmd.extend(['GCC_TREAT_WARNINGS_AS_ERRORS=YES',
                'MTL_TREAT_WARNINGS_AS_ERRORS=YES',
                'SWIFT_TREAT_WARNINGS_AS_ERRORS=YES'])

    if version[0] in string.digits:
        # Use version number only if it starts with a digit.  This
        # will exclude fake versions like "NIGHTLY" and "CUSTOM".
        cmd.append('MW_VERSION=' + version)

    check_call(cmd)


def iter_build_settings():
    cmd = [
        xcrun,
        'xcodebuild',
        '-showBuildSettings',
        '-workspace', workspace,
        '-scheme', 'MWServer-iOS',
        '-destination', destination,
        ]

    for line in check_output(cmd, encoding='utf-8').split('\n'):
        line = line.split(' = ')
        if len(line) == 2:
            yield tuple(item.strip() for item in line)


def create_app_archive(app_archive_path):
    if app_archive_path:
        build_settings = dict(iter_build_settings())
        app_path = os.path.join(build_settings['BUILT_PRODUCTS_DIR'],
                                build_settings['WRAPPER_NAME'])
        check_call(['/usr/bin/ditto',
                    '-cz',
                    '--keepParent',
                    app_path,
                    app_archive_path])


def main():
    parser = argparse.ArgumentParser()

    #
    # --archive and --app-archive-path need to be mutually exclusive, because
    # distribution archives aren't built in the normal BUILT_PRODUCTS_DIR,
    # meaning create_app_archive won't find the correct app bundle
    #
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--archive',
                       action = 'store_true',
                       help = 'create an archive for distribution')
    group.add_argument('--app-archive-path',
                       help = ('create a compressed CPIO archive containing '
                               'the built app bundle at the specified path'))

    parser.add_argument('--version',
                        default = 'CUSTOM',
                        help = 'version number [default: %(default)s]')
    args = parser.parse_args()

    build(args.archive, args.version)
    create_app_archive(args.app_archive_path)


if __name__ == '__main__':
    main()
