#!/bin/zsh

#
# Check for, back up, or remove an existing MWorks installation
#

set -u


progname=$0

mw_files=(
    # Current
    '/Applications/MWClient.app'
    '/Applications/MWServer.app'
    '/Library/Application Support/MWorks'
    '/Library/Frameworks/MWorksCocoa.framework'
    '/Library/Frameworks/MWorksCore.framework'
    '/Library/Frameworks/MWorksPython.framework'
    '/Library/Frameworks/MWorksSwift.framework'

    # Legacy
    '/Applications/MWEditor.app'
    '/Developer/Library/Xcode/Project Templates/MWorks'
    '/Documents/MWorks'
    '/Documents/MonkeyWorks'
    '/Library/Application Support/Developer/Shared/Xcode/Project Templates/MWorks'
    '/Library/Application Support/MWClient'
    '/Library/Application Support/MWEditor'
    '/Library/Application Support/MonkeyWorks'
    '/Library/Application Support/MonkeyWorksClient'
    '/Library/Application Support/MonkeyWorksEditor'
    '/Library/Application Support/NewClient'
    '/Library/Application Support/NewEditor'
    '/Library/Frameworks/MonkeyWorksCocoa.framework'
    '/Library/Frameworks/MonkeyWorksCore.framework'
    '/Library/Frameworks/Narrative.framework'
    '/Library/Frameworks/Scarab.framework'
    '/Library/MonkeyWorks'
    '/Library/Python/2.6/site-packages/mworks.pth'
    '/Library/Python/2.7/site-packages/mworks.pth'
    )


usage() {
    cat <<EOF
Usage: $progname [options]

Options:
  --help     show this help message and exit
  --check    check for installed MWorks files
  --backup   don't restore, but back up old installation
  --delete   permanently delete uninstalled files
  --no-sudo  don't execute commands as the superuser
EOF
}


check_installed_files() {
    local filename

    for filename in $mw_files; do
        if [[ -e $filename ]]; then
            echo 'Found installed MWorks files'
            return 0
        fi
    done

    echo 'No installed MWorks files found'
    return 1
}


rename_existing_directory() {
    local dirname=$1
    local timestamp
    local old_dirname

    if [[ -e $dirname ]]; then
        timestamp=$(/usr/bin/stat -L -f '%SB' $dirname | /usr/bin/tr : .)
        old_dirname="$dirname ($timestamp)"
        echo "Found existing '$dirname'; moving to '$old_dirname'"
        /bin/mv $dirname $old_dirname || return
    fi

    return 0
}


create_directory() {
    local dirname=$1
    local dirlist=()
    local username

    while [[ ! -e $dirname ]]; do
        dirlist=($dirname $dirlist)
        dirname=$(/usr/bin/dirname $dirname)
    done

    # Since the backup will be created as root but moved/deleted by a
    # normal user, we need to ensure that all created subdirectories
    # have the same owner as the base directory
    username=$(/usr/bin/stat -L -f '%Su' $dirname)

    for dirname in $dirlist; do
        /bin/mkdir $dirname || return
        /usr/sbin/chown $username $dirname || return
    done

    return 0
}


backup_files() {
    local backupdir=$1
    local filename
    local destdir

    rename_existing_directory $backupdir || return

    for filename in $mw_files; do
        if [[ -e $filename ]]; then
            echo "Moving '$filename' to '$backupdir'"
            destdir="${backupdir}$(/usr/bin/dirname $filename)"
            create_directory $destdir || return
            /bin/mv $filename $destdir || return
        fi
    done

    return 0
}


restore_files() {
    local backupdir=$1
    local filename
    local srcfile
    local trashdir

    if [[ ! -d $backupdir ]]; then
        return 0
    fi

    for filename in $mw_files; do
        srcfile="${backupdir}${filename}"
        if [[ -e $srcfile ]]; then
            echo "Restoring '$filename' from '$backupdir'"
            /bin/mv $srcfile "$(/usr/bin/dirname $filename)" || return
        fi
    done

    trashdir=~/.Trash
    rename_existing_directory "${trashdir}/$(/usr/bin/basename $backupdir)" || return
    echo "Moving '$backupdir' to '$trashdir'"
    /bin/mv $backupdir $trashdir || return

    return 0
}


check=0
backup=0
delete=0
use_sudo=1

for arg in $argv; do
    case $arg in
        --help)
            usage
            exit 0
            ;;

        --check)
            check=1
            ;;

        --backup)
            backup=1
            ;;

        --delete)
            delete=1
            ;;

        --no-sudo)
            use_sudo=0
            ;;

        *)
            usage
            exit 2
            ;;
    esac
done

if (( check )); then
    check_installed_files
    exit
fi

if (( use_sudo && ( $(/usr/bin/id -u) != 0 ) )); then
    exec /usr/bin/sudo $0 $argv
fi

backupdir=~'/Desktop/MWorks Backup'

if (( backup )); then
    backup_files $backupdir || exit
else
    uninstalldir=~'/.Trash/Uninstalled MWorks'
    backup_files $uninstalldir || exit
    restore_files $backupdir || exit
    if (( delete )); then
        echo "Deleting '$uninstalldir'"
        /bin/rm -Rf $uninstalldir || exit
    fi
fi

exit 0
