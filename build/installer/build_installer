#!/usr/bin/env python3

import argparse
import glob
import itertools
import os
import plistlib
from subprocess import check_call


installer_root = '/tmp/mw_installer'

app_paths = (
    '/Applications/MWClient.app',
    '/Applications/MWServer.app',
    )

core_components_package_name = 'MWorksCoreComponents'
optional_plugins_package_name = 'MWorksOptionalPlugins'


package_contents = {

    core_components_package_name:
        app_paths + (
        '/Library/Application Support/MWorks/Configuration/examples',
        '/Library/Application Support/MWorks/Documentation',
        '/Library/Application Support/MWorks/MWEL',
        '/Library/Application Support/MWorks/Plugins/Core/HighPrecisionClock.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/LowPrioritySchedulerPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/ZenSchedulerPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/ZenStateSystemPlugin.bundle',
        '/Library/Frameworks/MWorksCocoa.framework',
        '/Library/Frameworks/MWorksCore.framework',
        '/Library/Frameworks/MWorksPython.framework',
        '/Library/Frameworks/MWorksSwift.framework',
        ),

    'MWorksStandardPlugins':
        (
        '/Library/Application Support/MWorks/Plugins/Client/ImageViewer.bundle',
        '/Library/Application Support/MWorks/Plugins/Client/MWorksBehavioralWindow.bundle',
        '/Library/Application Support/MWorks/Plugins/Client/MWorksVariablesWindow.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/DriftingGratingStimulusPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/EasyEye.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/FaceRecognizer.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/Firmata.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/LayerStimulus.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/MSSWGamepadPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/MouseInput.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/MovieStimulusPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/MovingDots.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/NE500Plugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/RCBLVDS.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/ServersideConduit.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/TextStimulus.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/TouchInput.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/USBHID.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/VideoStimulus.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/WhiteNoiseBackground.bundle',
        ),

    optional_plugins_package_name:
        (
        # Optional plugins are discovered at run time
        ),

    'MWorksPythonTools':
        (
        '/Library/Application Support/MWorks/Plugins/Client/PythonBridgePlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/PythonPlugin.bundle',
        '/Library/Application Support/MWorks/Scripting/Python',
        ),

    'MWorksMATLABTools':
        (
        '/Library/Application Support/MWorks/Scripting/MATLAB',
        ),

    'MWorksExampleExperiments':
        (
        '/Library/Application Support/MWorks/Examples',
        ),

    'MWorksDevelopmentFiles':
        (
        '/Library/Application Support/MWorks/Developer',
        ),

    }


def find_optional_plugins():
    standard_components = set()
    for components in package_contents.values():
        standard_components.update(components)

    optional_plugins = tuple(sorted(
        plugin for plugin in itertools.chain(
        glob.iglob('/Library/Application Support/MWorks/Plugins/Client/*.bundle'),
        glob.iglob('/Library/Application Support/MWorks/Plugins/Core/*.bundle'),
        )
        if plugin not in standard_components
        ))

    package_contents[optional_plugins_package_name] = optional_plugins


def get_tmp_path(package, path):
    return os.path.join(installer_root, package, path[1:])


def copy_path(package, path):
    destdir = get_tmp_path(package, os.path.dirname(path))
    check_call(['/bin/mkdir', '-p', destdir])
    check_call(['/usr/bin/rsync', '-a', path, destdir])


def build_component_package(package_name):
    package_path = os.path.join(installer_root, package_name)
    component_plist_path = package_path + '-Components.plist'

    # Ensure that the package path exists, even if the package is
    # empty (e.g. if there are no optional plugins)
    if not os.path.isdir(package_path):
        check_call(['/bin/mkdir', package_path])

    check_call([
        '/usr/bin/pkgbuild',
        '--analyze',
        '--root', package_path,
        component_plist_path,
        ])

    with open(component_plist_path, 'rb') as fp:
        plist = plistlib.load(fp)

    for item in plist:
        item['BundleIsVersionChecked'] = False
        for key in ('BundleHasStrictIdentifier', 'BundleIsRelocatable'):
            if key in item:
                item[key] = False

    with open(component_plist_path, 'wb') as fp:
        plistlib.dump(plist, fp)

    cmd = [
        '/usr/bin/pkgbuild',
        '--identifier', 'org.mworks-project.pkg.' + package_name,
        '--root', package_path,
        '--component-plist', component_plist_path,
        package_path + '.pkg',
        ]

    if package_name == core_components_package_name:
        cmd[-1:-1] = ['--scripts', 'scripts']

    check_call(cmd)


def codesign(signing_name, path):
    check_call([
        '/usr/bin/codesign',
        '--verbose',
        '--force',
        '--sign', 'Developer ID Application: ' + signing_name,
        path,
        ])


def main():
    parser = argparse.ArgumentParser(description='Build an MWorks installer package.')
    parser.add_argument('version', help='version tag for disk image')
    parser.add_argument('--sign', dest='signing_name', metavar='name',
                        help='name on Developer ID certificates to use for code signing')
    args = parser.parse_args()

    installer_name = 'MWorks'
    installer_version = args.version
    signing_name = args.signing_name
    
    find_optional_plugins()

    check_call(['/bin/rm', '-Rf', installer_root])

    for package_name, contents in package_contents.items():
        for path in contents:
            copy_path(package_name, path)
        if signing_name and package_name == core_components_package_name:
            for app_path in app_paths:
                codesign(signing_name, get_tmp_path(package_name, app_path))
        build_component_package(package_name)

    dmg_contents_dir = os.path.join(installer_root, '%s %s' % (installer_name, installer_version))
    check_call(['/bin/mkdir', dmg_contents_dir])

    installer_path = os.path.join(dmg_contents_dir, installer_name + '.pkg')
    cmd = [
        '/usr/bin/productbuild',
        '--distribution', 'MWorks.dist',
        '--package-path', installer_root,
        '--resources', 'resources',
        installer_path,
        ]
    if signing_name:
        cmd[-1:-1] = ['--sign', 'Developer ID Installer: ' + signing_name]
    check_call(cmd)

    uninstall_script_path = os.path.join(dmg_contents_dir, 'Uninstall MWorks')
    check_call(['/bin/cp', 'scripts/uninstall_mworks', uninstall_script_path])
    if signing_name:
        codesign(signing_name, uninstall_script_path)

    check_call(['/bin/cp', '../../LICENSE.txt', dmg_contents_dir])

    output_file = os.path.join(installer_root, '%s-%s.dmg' % (installer_name, installer_version))
    check_call([
        '/usr/bin/hdiutil',
        'create',
        '-srcfolder', dmg_contents_dir,
        output_file,
        ])
    if signing_name:
        codesign(signing_name, output_file)


if __name__ == '__main__':
    main()
