#!/usr/bin/env python3

import argparse
import collections
from contextlib import contextmanager
from functools import partial, wraps
import os
import os.path
import platform
import subprocess
import string
import sys
import time


################################################################################
#
# Shared configuration
#
################################################################################


xcrun = '/usr/bin/xcrun'

mw_version = 'CUSTOM'

srcroot = os.path.abspath((os.path.dirname(__file__) or '.') + '/..')


################################################################################
#
# Build helpers
#
################################################################################


class BuilderSkipped(Exception):
    pass


def announce(fmt, *args):
    msg = fmt % args
    sys.stderr.write(msg + '\n')
    sys.stderr.flush()
    return msg


warnings = []

def warn(fmt, *args):
    warnings.append(announce('WARNING: ' + fmt, *args))


def check_call(args, **kwargs):
    announce('Running command: %s', ' '.join(repr(a) for a in args))
    subprocess.check_call(args, **kwargs)


@contextmanager
def workdir(path):
    old_path = os.getcwd()
    announce('Entering directory %r', path)
    os.chdir(path)

    try:
        yield
    except BuilderSkipped:
        skipped = True
    else:
        skipped = False

    announce('Leaving directory %r', path)
    os.chdir(old_path)
    if skipped:
        raise BuilderSkipped


all_builders = collections.OrderedDict()
required_builder_names = []

def builder(func, *, build_dir=None, name=None, required=False):
    if isinstance(func, str):
        return partial(builder,
                       build_dir = func,
                       name = name,
                       required = required)

    if build_dir is None:
        build_dir = func.__name__
    if name is None:
        name = func.__name__

    @wraps(func)
    def func_wrapper():
        announce('Building %s', name)
        try:
            with workdir(build_dir):
                func()
        finally:
            announce('Finished %s', name)

    all_builders[name] = func_wrapper
    if required:
        required_builder_names.append(name)


def subdir_builder(func, *, base_dir=None, name=None):
    if isinstance(func, str):
        return partial(subdir_builder,
                       base_dir = func,
                       name = name)

    if base_dir is None:
        base_dir = func.__name__
    if name is None:
        name = func.__name__

    @wraps(func)
    def func_wrapper():
        if os.listdir():
            func()
        else:
            # An empty subdirectory is most likely a git submodule that hasn't
            # been initialized and/or updated.  Warn the user, in case this
            # isn't intentional.
            warn('Directory %r is empty', os.getcwd())
            raise BuilderSkipped

    base_dir_path = os.path.join(srcroot, base_dir)
    for subdir in sorted(os.listdir(base_dir_path)):
        subdir_path = os.path.join(base_dir_path, subdir)
        if os.path.isdir(subdir_path) and (not subdir.startswith('.')):
            builder(func_wrapper,
                    build_dir = os.path.join(base_dir, subdir),
                    name = name + '/' + subdir)


def xcodebuild(scheme = 'Everything',
               destination = 'generic/platform=macOS,name=Any Mac',
               actions = ['clean', 'build'],
               timeout = None):
    cmd = [xcrun,
           'xcodebuild',
           '-scheme', scheme,
           '-destination', destination,
           ] + actions + [
           'GCC_TREAT_WARNINGS_AS_ERRORS=YES',
           'MTL_TREAT_WARNINGS_AS_ERRORS=YES',
           'SWIFT_TREAT_WARNINGS_AS_ERRORS=YES',
           ]

    if mw_version[0] in string.digits:
        # Use version number only if it starts with a digit.  This
        # will exclude fake versions like "NIGHTLY" and "CUSTOM".
        cmd.append('MW_VERSION=' + mw_version)

    check_call(cmd, timeout=timeout)


def make(args=[]):
    check_call([xcrun, 'make'] + args)


################################################################################
#
# Builders
#
################################################################################


@builder('build')
def prepare():
    check_call(['./prepare_for_install'])


@builder('build/xcode', required=True)
def build_requirements():
    make()


@builder
def supporting_libs():
    xcodebuild()
    with workdir('scarab'):
        xcodebuild()


@builder
def core():
    xcodebuild()


# Install the standard examples *before* building plugins, since some plugins
# will install their own examples/tests
@builder
def examples():
    make()


@subdir_builder('plugins/core')
def core_plugins():
    xcodebuild()


@builder('tools/python')
def python_tools():
    xcodebuild()


@builder
def swift():
    xcodebuild(scheme = 'MWorksSwift',
               destination = 'platform=macOS,arch=' + platform.machine(),
               actions = ['clean', 'build-for-testing', 'test'])
    xcodebuild(actions=['build'])


@builder
def cocoa():
    xcodebuild()


@builder('apps/client')
def client():
    xcodebuild()


@subdir_builder('plugins/client')
def client_plugins():
    xcodebuild()


@builder('tools/matlab')
def matlab_tools():
    try:
        xcodebuild('MATLAB Install Check')
    except subprocess.CalledProcessError:
        warn('MATLAB install check failed')
        raise BuilderSkipped

    # As of Xcode 15 and MATLAB R2023b, xcodebuild sometimes fails to exit when
    # running the MATLAB tools tests.  In order to prevent this from breaking
    # the build process, build the Install and Test targets separately, and
    # time out the tests after 5 minutes.
    xcodebuild('Install')
    try:
        xcodebuild(scheme = 'Test',
                   actions = ['build'],
                   timeout = 300)
    except subprocess.TimeoutExpired:
        warn('MATLAB tools tests timed out')

    with workdir('MATLABWindow'):
        xcodebuild()


@builder('apps/server')
def server():
    xcodebuild()


@builder
def doc():
    xcodebuild()


@builder
def mwel():
    xcodebuild()


################################################################################
#
# Main function
#
################################################################################


def main():
    global mw_version

    parser = argparse.ArgumentParser()
    parser.add_argument('--show-builders',
                        action = 'store_true',
                        help = 'show available builders and exit')
    parser.add_argument('--mw-version',
                        default = mw_version,
                        help = 'MWorks version number [default: %(default)s]')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--start-with',
                       metavar = 'BUILDER_NAME',
                       help = 'start build from given builder')
    group.add_argument('--start-after',
                       metavar = 'BUILDER_NAME',
                       help = 'start build after given builder')
    parser.add_argument('requested_builders',
                        metavar = 'builder_name',
                        nargs = '*',
                        help = 'run only the requested builder(s)')
    args = parser.parse_args()

    all_builder_names = list(all_builders.keys())
    if args.show_builders:
        announce('\n'.join(all_builder_names))
        return

    mw_version = args.mw_version
    start_with = args.start_with
    start_after = args.start_after
    requested_builders = args.requested_builders

    if start_with or start_after:
        if requested_builders:
            parser.error('cannot specify both a starting builder and requested '
                         'builder names')
        first_builder = (start_with or start_after)
        if first_builder not in all_builder_names:
            parser.error('unknown builder: ' + repr(first_builder))
        first_builder_index = all_builder_names.index(first_builder)
        if start_after:
            first_builder_index += 1
            if first_builder_index == len(all_builder_names):
                parser.error('no builders after ' + first_builder)
        requested_builders = all_builder_names[first_builder_index:]
    else:
        unknown_builders = [name for name in requested_builders
                            if (name not in all_builder_names)]
        if unknown_builders:
            parser.error('unknown builders: ' +
                         ', '.join(repr(name) for name in unknown_builders))

    skipped_builder_names = []

    with workdir(srcroot):
        for builder_name, builder in all_builders.items():
            if ((not requested_builders) or
                (builder_name in requested_builders) or
                (builder_name in required_builder_names)):

                try:
                    builder()
                except BuilderSkipped:
                    skipped_builder_names.append(builder_name)

    if skipped_builder_names:
        msg = '\nThe following builders were skipped:\n\n'
        for name in skipped_builder_names:
            msg += '    %s\n' % name
        announce(msg)

    if warnings:
        # Re-announce warnings, so that we don't have to hunt for them in the
        # output
        announce('\n'.join(warnings))

        # The Python interpreter will exit with status 1 if there's an exception
        # and 2 if there's an argument-parsing error.  Exit with status 3 to
        # indicate that we omitted warnings but didn't otherwise fail.
        sys.exit(3)


if __name__ == '__main__':
    main()
