#!/usr/bin/python

from contextlib import contextmanager
from functools import partial, wraps
from itertools import izip
from optparse import OptionParser
import os
import os.path
import subprocess
import string
import sys
import time


################################################################################
#
# Shared configuration
#
################################################################################


xcrun = '/usr/bin/xcrun'

mw_version = 'CUSTOM'


################################################################################
#
# Build helpers
#
################################################################################


def announce(msg, *args):
    sys.stderr.write((msg + '\n') % args)


def check_call(args, **kwargs):
    announce('Running command: %s', ' '.join(repr(a) for a in args))
    subprocess.check_call(args, **kwargs)


@contextmanager
def workdir(path):
    old_path = os.getcwd()
    announce('Entering directory %r', path)
    os.chdir(path)
    yield
    announce('Leaving directory %r', path)
    os.chdir(old_path)


all_builders = []
required_builder_names = []

def builder(func, build_dir=None, required=False, transient=False):
    if isinstance(func, basestring):
        return partial(builder,
                       build_dir = func,
                       required = required,
                       transient = transient)

    builder_name = func.__name__ 
    if build_dir is None:
        build_dir = builder_name

    @wraps(func)
    def func_wrapper():
        if transient and (not os.path.isdir(build_dir)):
            announce('Directory %r not found; skipping %s', build_dir,
                     builder_name)
        else:
            announce('Building %s', builder_name)
            with workdir(build_dir):
                func()

    all_builders.append(func_wrapper)
    if required:
        required_builder_names.append(builder_name)


def list_subdirs():
    return sorted(dir for dir in os.listdir('.')
                  if os.path.isdir(dir) and (not dir.startswith('.')))


def xcodebuild(scheme='Everything', actions=['clean', 'build']):
    cmd = [xcrun,
           'xcodebuild',
           '-scheme', scheme,
           ] + actions + [
           'GCC_TREAT_WARNINGS_AS_ERRORS=YES',
           'SWIFT_TREAT_WARNINGS_AS_ERRORS=YES',
           ]

    if mw_version[0] in string.digits:
        # Use version number only if it starts with a digit.  This
        # will exclude fake versions like "NIGHTLY" and "CUSTOM".
        cmd.append('MW_VERSION=' + mw_version)

    check_call(cmd)


def make(args=[]):
    check_call([xcrun, 'make'] + args)


################################################################################
#
# Builders
#
################################################################################


@builder('mworks/build/installer/scripts')
def uninstall():
    check_call(['./uninstall_mworks', '--delete', '--no-sudo'])


@builder('mworks/build/xcode', required=True)
def build_requirements():
    make()


@builder('mworks/supporting_libs')
def supporting_libs():
    xcodebuild()


@builder('mworks/supporting_libs/scarab')
def scarab():
    xcodebuild()


@builder('mworks/core')
def core():
    xcodebuild()


# Install the standard examples *before* building plugins, since some plugins
# will install their own examples/tests
@builder('mworks/examples')
def examples():
    make()


@builder('mworks/plugins/core')
def core_plugins():
    for subdir in ('DriftingGratingStimulus',
                   'EasyEye',
                   'FaceRecognizer',
                   'Firmata',
                   'LayerStimulus',
                   'MouseInput',
                   'MoviePlugin',
                   'MovingDots',
                   'NE500',
                   'RCBLVDS',
                   'ServersideConduit',
                   'SidewinderPlugAndPlayGamepadPlugin',
                   'TextStimulus',
                   'TouchInput',
                   'USBHID',
                   'VideoStimulus',
                   'WhiteNoiseBackground'):
        with workdir(subdir):
            xcodebuild()


@builder('plugins/core', transient=True)
def local_core_plugins():
    for subdir in list_subdirs():
        with workdir(subdir):
            xcodebuild()


@builder('mworks/tools/python')
def python_tools():
    xcodebuild()


@builder('mworks/tools/matlab')
def matlab_tools():
    try:
        xcodebuild('MATLAB Install Check')
    except subprocess.CalledProcessError:
        announce('MATLAB install check failed; skipping matlab_tools')
    else:
        xcodebuild()


@builder('mworks/swift')
def swift():
    xcodebuild(scheme = 'MWorksSwift',
               actions = ['clean', 'build-for-testing', 'test'])
    xcodebuild(actions=['build'])


@builder('mworks/cocoa')
def cocoa():
    xcodebuild()


@builder('mworks/apps/client')
def client():
    xcodebuild()


@builder('mworks/plugins/client')
def client_plugins():
    for subdir in ('BehavioralWindow',
                   'ImageViewer',
                   'PythonBridgePlugin',
                   'VariablesWindow'):
        with workdir(subdir):
            xcodebuild()


@builder('plugins/client', transient=True)
def local_client_plugins():
    for subdir in list_subdirs():
        with workdir(subdir):
            xcodebuild()


@builder('mworks/apps/server')
def server():
    xcodebuild()


@builder('mworks/doc')
def doc():
    xcodebuild()


@builder('mworks/mwel')
def mwel():
    make()


################################################################################
#
# Main function
#
################################################################################


def main():
    global mw_version

    parser = OptionParser(usage='Usage: %prog [options] [builder_name ...]')
    parser.add_option('--mw-version',
                      dest = 'mw_version',
                      default = mw_version,
                      help = 'MWorks version number [default: %default]')
    parser.add_option('--start-with',
                      dest = 'first_builder',
                      metavar = 'BUILDER_NAME',
                      help = 'Start build from given builder')

    (options, requested_builders) = parser.parse_args()
    mw_version = options.mw_version

    all_builder_names = [builder.__name__ for builder in all_builders]

    if options.first_builder:
        if requested_builders:
            parser.error('cannot specify builder names when using --start-with')
        first_builder = options.first_builder
        if first_builder not in all_builder_names:
            parser.error('unknown builder: ' + first_builder)
        requested_builders = \
            all_builder_names[all_builder_names.index(first_builder):]
    else:
        unknown_builders = [name for name in requested_builders
                            if (name not in all_builder_names)]
        if unknown_builders:
            parser.error('unknown builders: ' +
                         ', '.join(repr(name) for name in unknown_builders))

    srcroot = os.path.abspath(os.path.dirname(__file__) + '/../..')

    with workdir(srcroot):
        for builder_name, builder in izip(all_builder_names, all_builders):
            if ((not requested_builders) or
                (builder_name in requested_builders) or
                (builder_name in required_builder_names)):

                builder()


if __name__ == '__main__':
    main()
