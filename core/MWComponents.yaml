---


###############################################################################
#
# Groups
#
###############################################################################


name: Variables
is_group: yes
description: >
    Variables are a fundamental part of all MWorks experiments.  They store
    parameters, collect results, and mediate the transfer of data between
    components.


---


name: Actions
is_group: yes
description: >
    Actions are the smallest unit of execution logic within an experiment. They
    initiate a single operation or event (e.g. playing a sound, showing a visual
    stimulus, or assigning a value to a variable).


---


name: Transitions
is_group: yes
description: >
    Transitions control how an experiment moves through a `Task System`. Each
    `Task System State` repeatedly tests its transitions until one of them
    succeeds, after which control passes to the successful transition's target
    state.


---


name: Stimuli
is_group: yes
description: Visual stimuli


---


name: Sounds
is_group: yes
description: Auditory stimuli


---


name: Paradigm Components
is_group: yes
description: >
    Paradigm components provide structure to an experiment and determine the
    flow of its execution.  They contain `Actions` and other paradigm
    components.


---


name: Replicators
is_group: yes
description: >
    Replicators are not run-time components.  Instead, they are constructs that
    replicate, at *parse time*, the components contained within them.  They
    provide a way to generate a set of related components from a parameterized
    "template".


---


name: Input/Output
is_group: yes
description: Input/output (I/O) devices


---


name: Filters
is_group: yes
description: Filters and calibrators


---


name: Optimizers and Variable Monitors
is_group: yes
description: >
    Components that watch variable values, automatically perform computations,
    and output results


---


name: Resources
is_group: yes
description: |
    Resource files (images, scripts, etc.) needed by an experiment.  At run
    time, all resource files are copied, along with the experiment file itself,
    to the system running MWServer.

    *Note*:  In the absence of resource declarations, the MWorks parser
    infers the required resources from the ``path`` and ``directory_path``
    attributes of other components.  However, if the experiment declares
    any resources, then this inference step is skipped.  Hence, an experiment
    that declares any resources must include *all* required files in its
    resource declarations.


---


###############################################################################
#
# Variables
#
###############################################################################


name: Folder
signature: folder
mwel_alias: group
group: Variables
transient: yes
toplevel: yes
allowed_child:
  - Calibrator
  - Filter
  - IODevice
  - Optimizer
  - Replicator
  - Resource
  - Selection Variable
  - Sound Group
  - Sound Stimulus
  - Stimulus
  - Stimulus Group
  - Variable
description: >
    A folder for (purely) organizational purposes.  Variables defined in a
    folder will be displayed as an expandable group in MWClient's variables
    window.


---


name: Base Variable
abstract: yes
group: Variables
toplevel: yes
parameters: 
  -
    name: groups
    description: >
        Comma-separated list containing the names of groups to which the
        variable belongs.  Variable groups are displayed as expandable sections
        in MWClient's variables window.
  -
    name: description
    alias: desc
    description: >
        Description of the variable's meaning or intended usage.  Variable
        descriptions are displayed as tooltips in MWClient's variables window.


---


name: Variable
signature: variable
mwel_alias: var
isa: Base Variable
allowed_child: Action
description: >
    A general-purpose variable, used to store experiment parameters, collect
    results, and mediate the transfer of data between components
parameters: 
  - 
    name: default_value
    required: yes
    example: 0
    description: >
        Initial value assigned to the variable when the experiment is loaded
  - 
    name: type
    options: [any, boolean, integer, float, string, list]
    default: any
    deprecated: yes
    description: >
        Controls how the content of `default_value`_ is interpreted.  When set
        to ``any`` (recommended), the default value is parsed like a normal
        expression, and the parser infers its type.
  - 
    name: scope
    options: [global, local]
    default: global
    description: |
        Controls the visibility of changes made to the variable's value.

        If a variable has local scope, then changes to its value are visible
        only within the `paradigm component <Paradigm Components>` in which the
        assignment was made.  These local changes persist between executions of
        the paradigm component.

        If a variable has global scope, changes to its value are visible
        everywhere.
  - 
    name: logging
    options: [never, when_changed]
    default: when_changed
    description: >
        Determines when the variable's value is written to the event stream (and
        thereby the data file)
  -
    name: persistent
    alias: saved
    default: 'NO'
    description: >
        If ``YES``, then the variable's value is included in saved variable sets
        created via MWClient
  - 
    name: exclude_from_data_file
    default: 'NO'
    description: >
        If ``YES``, then the variable's value is *not* written to the data file.
        Other event stream listeners (e.g. MWClient, client- and server-side
        conduits) continue to receive its value.


---


name: Selectable
abstract: yes
parameters: 
  - 
    name: selection
    options:
      - sequential
      - sequential_ascending
      - sequential_descending
      - random_without_replacement
      - random_with_replacement
    default: sequential
    description: Order in which to draw selections
  - 
    name: nsamples
    default: 1
    description: >
       Number of samples to allow before `Reset Selections` is required
  - 
    name: sampling_method
    options: [cycles, samples]
    default: cycles
    description: >
        Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all*
        possible selections must be made to complete one sample.  If set to
        ``samples``, each individual selection counts as a sample.


---


name: Selection Variable
signature: variable/selection
isa: [Selectable, Base Variable]
description: >
    A variable whose current value is drawn from a list of possible values.  The
    order and number of selected values are determined by `selection`_,
    `nsamples`_, and `sampling_method`_.  Use `Next Selection` to advance to the
    next value.
parameters: 
  - 
    name: values
    required: yes
    description: >
        Comma-separated list of values from which the variable's current value
        is drawn.  May include :ref:`range expressions <Range Expressions>`.
  - 
    name: advance_on_accept
    default: 'NO'
    description: >
        If ``YES``, `Accept Selections` will automatically invoke
        `Next Selection` (unless all selections have been exhausted)
  - 
    name: autoreset
    default: 'NO'
    description: >
        If ``YES``, `Reset Selections` will be invoked automatically when all
        selections have been exhausted


---


name: Variable Assignment
signature: variable_assignment
group: Variables
toplevel: yes
description: |
    Assigns a value to a variable.

    Variable assignments differ from `Assign Variable` actions in two key ways:

    1. They are allowed only at the top level of an experiment. They cannot be
       declared inside a `Protocol` or other component.

    2. They are executed when the experiment loads, instead of at run time.  The
       assignment takes place after `regular variables <Variable>` are created,
       but before the creation of `selection variables <Selection Variable>` or
       other components.

    In MWEL, top-level `assignments <assignments>` are automatically converted
    into variable assignments.
parameters: 
  - 
    name: variable
    required: yes
    description: Variable name
  - 
    name: value
    required: yes
    description: Value to assign
  - 
    name: type
    options: [any, boolean, integer, float, string]
    default: string
    recommended: any
    description: >
        Controls how the content of `value`_ is interpreted.  When set to
        ``any``, the value is parsed like a normal expression, and the parser
        infers its type.


---


###############################################################################
#
# Stimuli
#
###############################################################################


name: Stimulus
abstract: yes
group: Stimuli
toplevel: yes
parameters:
  - 
    name: deferred
    options: ['no', 'yes', 'explicit']
    default: 'no'
    description: >
        Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded
        at experiment load time.  If ``yes``, the stimulus is loaded the first
        time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus
        must be loaded explictly with `Load Stimulus`.
  - 
    name: display
    description: >
        Name of the display on which the stimulus will be presented.  If
        omitted, the default display (if available) will be used.


---


name: Dynamic Stimulus Base
abstract: yes
parameters:
  - 
    name: autoplay
    default: 'NO'
    description: >
        If ``YES``, the stimulus will start playing automatically (as if by an
        implicit `Play Dynamic Stimulus` action) after it has been `queued
        <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It
        will also stop playing automatically (as if by an implicit `Stop Dynamic
        Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and
        `Update Stimulus Display` is invoked.


---


name: Stimulus Group
signature: stimulus_group
group: Stimuli
toplevel: yes
allowed_child:
  - Replicator
  - Stimulus
  - Stimulus Group
description: An indexable group of stimuli


---


name: Transform Stimulus
abstract: yes
isa: Stimulus
parameters: 
  - 
    name: x_size
    example: 5.0
    description: |
        Horizontal size (degrees).

        If omitted, the value of `y_size`_ is used.  It is an error to omit both
        x_size and y_size (unless `fullscreen`_ is ``YES``).
  - 
    name: y_size
    example: 5.0
    description: |
        Vertical size (degrees).

        If omitted, the value of `x_size`_ is used.  It is an error to omit both
        x_size and y_size (unless `fullscreen`_ is ``YES``).
  - 
    name: x_position
    default: 0.0
    description: Horizontal center position (degrees)
  - 
    name: y_position
    default: 0.0
    description: Vertical center position (degrees)
  - 
    name: rotation
    default: 0.0
    description: Rotation (degrees)
  - 
    name: fullscreen
    default: 'NO'
    description: >
        If ``YES``, the stimulus is sized to fill the display.  In this mode,
        `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are
        ignored.


---


name: Basic Transform Stimulus
abstract: yes
isa: Transform Stimulus
parameters: 
  - 
    name: alpha_multiplier
    default: 1.0
    description: |
        By default, the alpha multiplier controls the transparency of the
        stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.

        Changes to the parameters `source_blend_factor`_ and
        `dest_blend_factor`_ can alter how (or if) the alpha multiplier is used.
  - 
    name: source_blend_factor
    options:
      - zero
      - one
      - source_color
      - one_minus_source_color
      - dest_color
      - one_minus_dest_color
      - source_alpha
      - one_minus_source_alpha
      - dest_alpha
      - one_minus_dest_alpha
    default: source_alpha
    description: |
        Source blending factor.

        The parameters `source_blend_factor`_, `dest_blend_factor`_,
        `source_alpha_blend_factor`_, and `dest_alpha_blend_factor`_ provide
        detailed control over how the color components and alpha multiplier of
        each fragment of the stimulus (the "source") are combined with the color
        and alpha values already present in the framebuffer (the "destination"),
        which in turn result from blending the stimulus display background with
        any stimuli drawn beneath the source stimulus.  These parameters
        correspond directly to the four arguments of the `OpenGL
        <https://www.opengl.org>`_ function `glBlendFuncSeparate
        <https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendFuncSeparate.xhtml>`_.
        Please refer to that function's reference page for explanations of the
        different blend factor options.

        *Note*:  Irrespective of the blend factors used, the `blend equation
        <https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendEquation.xhtml>`_
        is always ``GL_FUNC_ADD``.
  - 
    name: dest_blend_factor
    default: one_minus_source_alpha
    description: >
        Destination blending factor.  Accepts the same values as
        `source_blend_factor`_.
  - 
    name: source_alpha_blend_factor
    description: |
        Source alpha blending factor.  Accepts the same values as
        `source_blend_factor`_.

        If omitted, the value of `source_blend_factor`_ is used.
  - 
    name: dest_alpha_blend_factor
    description: |
        Destination alpha blending factor.  Accepts the same values as
        `source_blend_factor`_.

        If omitted, the value of `dest_blend_factor`_ is used.


---


name: Base Image Stimulus
abstract: yes
isa: Basic Transform Stimulus
parameters: 
  - 
    name: alpha_multiplier
    default: 1.0
    description: |
        By default, the alpha multiplier controls the transparency of the
        stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.

        Changes to the parameters `source_blend_factor`_ and
        `dest_blend_factor`_ can alter how (or if) the alpha multiplier is used.

        *Note*:  If the image contains an `alpha channel
        <https://en.wikipedia.org/wiki/Alpha_compositing>`_, the embedded alpha
        value for each pixel is multiplied by the value of this parameter.


---


name: Image Stimulus
signature: stimulus/image_file
isa: Base Image Stimulus
description: |
    An image stimulus loaded from any standard-format image file.

    *Note*:  To preserve the image's aspect ratio on screen, `x_size`_ and
    `y_size`_ must be equal.  When drawn, the larger dimension spans the full
    specified size, while the smaller dimension is scaled to maintain the
    aspect ratio.
parameters: 
  - 
    name: path
    required: yes
    example:
      - images/image1.png
      - /path/to/image.png
    description: Filesystem path to the image file
  - 
    name: announce_load
    default: 'YES'
    description: >
        If ``YES``, messages will be posted to the console and event stream when
        the image is loaded or unloaded.


---


name: Blank Fullscreen Stimulus
signature: stimulus/blank_screen
isa: Stimulus
description: >
    A stimulus that fills the screen with a user-defined color.  This
    stimulus must be `queued <Queue Stimulus>` like any other.
parameters: 
  - 
    name: color
    default: 0.5,0.5,0.5
    description: >
        The fill color, expressed as a comma-separated list of red, green, and
        blue components.  Each component may be described by any valid
        expression, but the expression must result in a value between 0 and 1
        (inclusive).


---


name: Colored Transform Stimulus
abstract: yes
isa: Basic Transform Stimulus
parameters: 
  - 
    name: color
    default: 1.0,1.0,1.0
    description: >
        The color of the stimulus, expressed as a comma-separated list of red,
        green, and blue components.  Each component may be described by any
        valid expression, but the expression must result in a value between 0
        and 1 (inclusive).


---


name: Rectangle Stimulus
signature: stimulus/rectangle
isa: Colored Transform Stimulus
description: A rectangle stimulus


---


name: Ellipse Stimulus
signature: stimulus/ellipse
alias: stimulus/circle
isa: Colored Transform Stimulus
description: An ellipse stimulus


---


name: Fixation Point Stimulus
signature: stimulus/fixation_point
isa: Rectangle Stimulus
description: >
    A rectangular fixation point stimulus.  Also serves as a "calibratable"
    object for calibrator-related actions (e.g. `Take Calibration Sample`, `End
    Averaged Calibration Sample`).
parameters: 
  - 
    name: trigger_width
    required: yes
    description: >
        Width of the (square) fixation window, which shares its center with
        the visible stimulus rectangle
  - 
    name: trigger_watch_x
    required: yes
    description: >
        Variable containing the horizontal eye position
  - 
    name: trigger_watch_y
    required: yes
    description: >
        Variable containing the vertical eye position
  - 
    name: trigger_flag
    required: yes
    description: |
        Variable to which fixation status is written. When the
        subject's gaze (as reported by `trigger_watch_x`_ and
        `trigger_watch_y`_) enters the fixation window, the variable is set to
        true.  When the subject's gaze leaves the fixation window, the variable
        is set to false.

        *Note*: By default, fixation is reported only when the fixation point is
        on screen (i.e. after it has been `queued <Queue Stimulus>` and the
        display has been `updated <Update Stimulus Display>`).  If you need a
        hidden fixation point, set `alpha_multiplier`_ to zero or
        `active_when_hidden`_ to true.
  - 
    name: active_when_hidden
    default: 'NO'
    description: >
        If ``YES``, fixation is reported even if the fixation point is not on
        screen


---


name: Circular Fixation Point Stimulus
signature: stimulus/circular_fixation_point
isa: Ellipse Stimulus
description: >
    An elliptical fixation point stimulus.  Also serves as a "calibratable"
    object for calibrator-related actions (e.g. `Take Calibration Sample`, `End
    Averaged Calibration Sample`).
parameters: 
  - 
    name: trigger_width
    required: yes
    description: >
        Width of the (circular) fixation window, which shares its center with
        the visible stimulus ellipse
  - 
    name: trigger_watch_x
    required: yes
    description: >
        Variable containing the horizontal eye position
  - 
    name: trigger_watch_y
    required: yes
    description: >
        Variable containing the vertical eye position
  - 
    name: trigger_flag
    required: yes
    description: |
        Variable to which fixation status is written. When the
        subject's gaze (as reported by `trigger_watch_x`_ and
        `trigger_watch_y`_) enters the fixation window, the variable is set to
        true.  When the subject's gaze leaves the fixation window, the variable
        is set to false.

        *Note*: By default, fixation is reported only when the fixation point is
        on screen (i.e. after it has been `queued <Queue Stimulus>` and the
        display has been `updated <Update Stimulus Display>`).  If you need a
        hidden fixation point, set `alpha_multiplier`_ to zero or
        `active_when_hidden`_ to true.
  - 
    name: active_when_hidden
    default: 'NO'
    description: >
        If ``YES``, fixation is reported even if the fixation point is not on
        screen


---


###############################################################################
#
# Sounds
#
###############################################################################


name: Sound Stimulus
abstract: yes
group: Sounds
toplevel: yes
parameters: 
  - 
    name: autoload
    default: 'YES'
    description: >
        If true, the sound will be loaded automatically at experiment load time.
        Otherwise, the experiment must load the sound explicitly with `Load
        Sound`.


---


name: Sound Group
signature: sound_group
group: Sounds
toplevel: yes
allowed_child:
  - Replicator
  - Sound Group
  - Sound Stimulus
description: An indexable group of sounds


---


name: Audio Engine Sound Stimulus
abstract: yes
isa: Sound Stimulus
parameters: 
  - 
    name: volume
    alias: amplitude
    default: 1.0
    description: >
        Controls the volume at which the sound plays.  ``1.0`` is full volume,
        while ``0.0`` is silent.
  - 
    name: pan
    default: 0.0
    description: >
        Controls the stereo panning of the sound.  Acceptable values range from
        ``-1.0`` (left channel only) to ``1.0`` (right channel only).  A value
        of ``0.0`` produces an even balance of the left and right channels.


---


name: Audio PCM Buffer Sound Stimulus
abstract: yes
isa: Audio Engine Sound Stimulus
parameters: 
  - 
    name: loop
    default: 'NO'
    description: >
        If ``YES``, the sound will repeat indefinitely (or until `Stop Sound` is
        invoked)
  - 
    name: repeats
    default: 0
    description: |
        Number of times to repeat the sound.  Note that the sound will always
        play at least once, even if this value is less than one.

        If `loop`_ is ``YES``, this parameter is ignored.
  - 
    name: ended
    description: |
        Variable that will be set to true after the sound finishes playing.

        If `repeats`_ is greater than zero, the variable will be set only once,
        after all play-throughs complete.  If `loop`_ is ``YES``, or if the
        sound is stopped explicitly with `Stop Sound` before playback
        completes, the variable will never be set.


---


name: Audio File Stimulus
signature: sound/audio_file
alias: sound/wav_file
isa: Audio PCM Buffer Sound Stimulus
description: >
    A simple file-based sound stimulus
parameters: 
  - 
    name: path
    required: yes
    example:
      - sounds/sound1.wav
      - /path/to/sound.m4a
    description: Filesystem path to the sound file


---


name: Tone Stimulus
signature: sound/tone
isa: Audio Engine Sound Stimulus
description: >
    A simple tone sound stimulus
parameters: 
  - 
    name: frequency
    required: yes
    example: 440.0
    description: Frequency of the tone (hertz)
  - 
    name: duration
    default: 0
    example: 2s
    description: >
        Duration of the tone (microseconds).  If less than or equal to zero, the
        tone will continue playing until stopped explicitly with `Stop Sound`.
  - 
    name: ended
    description: |
        Variable that will be set to true after the tone finishes playing.

        If `duration`_ is less than or equal to zero, or if the tone is stopped
        explicitly with `Stop Sound` before playback completes, the variable
        will never be set.


---


###############################################################################
#
# Paradigm components
#
###############################################################################


name: Experiment
signature: experiment
group: Paradigm Components
toplevel: yes
allowed_child:
  - Protocol
  - Replicator
description: >
    Top-level container for all `protocols <Protocol>` in an experiment


---


name: Container State
abstract: yes
group: Paradigm Components
parameters: 
  - 
    name: interruptible
    default: 'YES'
    description: >
        If ``NO``, then any request to pause or stop the experiment while this
        component is executing will be deferred until said execution completes.
        This behavior is inherited by the component's children, making them
        non-interruptible as well.


---


name: List State
abstract: yes
isa: [Container State, Selectable]
allowed_child:
  - Action
  - Block
  - List
  - Replicator
  - Task System
  - Trial


---


name: Protocol
signature: protocol
isa: List State
description: |
    A top-level paradigm component that contains other sub-components.

    Protocols are the largest unit of logical organization in an experiment.  To
    "run" an experiment really means to run one or more of its protocols.

    The execution order and number of repetitions of a protocol's sub-components
    are determined by `selection`_, `nsamples`_, and `sampling_method`_.


---


name: Block
signature: block
isa: List State
description: |
    A container paradigm component.

    The execution order and number of repetitions of a block's sub-components
    are determined by `selection`_, `nsamples`_, and `sampling_method`_.


---


name: Trial
signature: trial
isa: List State
description: |
    A container paradigm component.

    The execution order and number of repetitions of a trial's sub-components
    are determined by `selection`_, `nsamples`_, and `sampling_method`_.


---


name: List
signature: list
isa: List State
description: |
    A container paradigm component.

    The execution order and number of repetitions of a list's sub-components are
    determined by `selection`_, `nsamples`_, and `sampling_method`_.


---


name: Task System
signature: task_system
mwel_alias: task
isa: Container State
allowed_child: Task System State
description: >
    A paradigm component defining a `finite state machine
    <https://en.wikipedia.org/wiki/Finite-state_machine>`_.  It contains `Task
    System State` objects, which execute `Actions` and select `Transitions`
    from one state to the next. The task system finishes when one of its states
    evaluates an `Exit Task System` transition.


---


name: Task System State
signature: task_system_state
mwel_alias: state
isa: Container State
allowed_child:
  - Action
  - Transition
description: >
    A paradigm component defining a state within a `finite state machine
    <https://en.wikipedia.org/wiki/Finite-state_machine>`_. It is contained
    within a `Task System` and specifies a list of `Actions`, which are executed
    when the state first gains control, and a list of `Transitions`, which are
    evaluated repeatedly until one of them succeeds and selects the next state.


---


###############################################################################
#
# Replicators
#
###############################################################################


name: Replicator
abstract: yes
group: Replicators
transient: yes
toplevel: yes
allowed_child:
  - List State
  - Replicator
  - Sound Group
  - Sound Stimulus
  - Stimulus
  - Stimulus Group


---


name: Range Replicator
signature: range_replicator
isa: Replicator
description: >
    A construct that replicates its contents (textually) at parse time.  Each
    replication assigns a different, sequential value to the specified
    `variable`_ (similar to a `for loop
    <https://en.wikipedia.org/wiki/For_loop>`_). This can be used, for example,
    to generate a separate `Trial` for each element in a `Stimulus Group` by
    using the replicator variable as the index in to the group.
parameters: 
  - 
    name: variable
    required: yes
    description: >
        Replicator variable.  The variable must have local scope.
  - 
    name: from
    required: yes
    description: >
        First value assigned to `variable`_
  - 
    name: to
    required: yes
    description: >
        Replication stops when `variable`_ is greater than this value
  - 
    name: step
    required: yes
    description: >
        Amount by which to increment the value of `variable`_ after each
        replication.  Must be greater than zero.


---


name: List Replicator
signature: list_replicator
isa: Replicator
description: |
    A construct that replicates its contents (textually) at parse time.  Each
    replication assigns a different value from a user-provided list to the
    specified `variable`_ (similar to a `foreach loop
    <https://en.wikipedia.org/wiki/Foreach_loop>`_). This can be used, for
    example, to generate a `Stimulus Group` of `images <Image Stimulus>` by
    using the replicator variable as the path to each image file.

    .. rubric:: Filenames Directive

    The value list can include one or more items of the form
    ``filenames(glob_pat)``, where ``glob_pat`` is a `glob pattern
    <https://en.wikipedia.org/wiki/Glob_(programming)>`_, similar to those used
    in Unix shell commands.  The glob pattern must match the names of one or
    more files.  Both absolute and relative paths are acceptable.  If the
    pattern matches no files, the parser raises an error.

    When the replicator is evaluated, each ``filenames`` directive is expanded
    into a comma-separated list of matching file names.  For example, if you
    have five image files named ``img1.png`` to ``img5.png``, then the following
    value lists are all equivalent:

    * ``img1.png, img2.png, img3.png, img4.png, img5.png``
    * ``filenames(*.png)``
    * ``filenames(img?.png)``
    * ``filenames(img[12].png), img3.png, filenames(img[!1-3].png)``
parameters: 
  - 
    name: variable
    required: yes
    description: >
        Replicator variable.  The variable must have local scope.
  - 
    name: values
    required: yes
    description: >
        Comma-separated list of values to assign to `variable`_, one per
        replication


---


###############################################################################
#
# Actions
#
###############################################################################


name: Action
abstract: yes
group: Actions


---


name: Report / Message
signature: action/report
isa: Action
description: Write a message to the console and event stream
parameters: 
  - 
    name: message
    required: yes
    description: |
        Message text.

        To include the values of variables or arbitrary expressions in the
        message, you can use `variable and expression interpolation <Variable and
        Expression Interpolation>` (e.g. ``x = $x, y = ${y}, x+y = $(x+y)``).


---


name: Assign Variable
signature: action/assignment
isa: Action
description: |
    Assign a value to a variable.

    If the target variable's current value is a list or dictionary, you can
    assign a new value to one of its elements by including one or more
    square-bracket-enclosed indices in `variable`_.

    In MWEL, `assignments <assignments>` are automatically converted into Assign
    Variable actions (except for top-level assignments, which are converted into
    `Variable Assignment` instances).
parameters: 
  - 
    name: variable
    required: yes
    example:
      - my_var
      - my_var[2]
      - my_var[x][y]['b']
    description: Variable name.  May include one or more index expressions.
  - 
    name: value
    required: yes
    description: Value to assign


---


name: Pulse Variable
signature: action/pulse
isa: Action
description: >
    Sets a variable high (i.e. sets its value to 1).  Then, after the specified
    duration, sets it low (i.e. to 0).  The end of the pulse is triggered
    asynchronously, so this action does *not* pause the experiment.
parameters: 
  - 
    name: variable
    required: yes
    description: Variable to pulse
  - 
    name: duration
    required: yes
    description: Duration of the pulse (microseconds)


---


name: Assert
signature: action/assert
isa: Action
description: >
    Tests a boolean condition.  If the condition evaluates to false, reports an
    error with the specified message.
parameters: 
  - 
    name: condition
    required: yes
    description: Condition expression
  - 
    name: message
    description: |
        Error message to report if the assertion fails.  If omitted, a default
        message containing the condition expression is used.

        To include the values of variables or arbitrary expressions in the
        message, you can use `variable and expression interpolation <Variable and
        Expression Interpolation>` (e.g. ``x = $x, y = ${y}, x+y = $(x+y)``).
  - 
    name: stop_on_failure
    default: 'NO'
    description: >
        If ``YES``, the experiment will automatically stop if the assertion
        fails


---


name: Schedule Actions
signature: action/schedule
isa: Action
allowed_child: Action
description: |
    Schedule the execution of a list of contained actions.  These actions can be
    scheduled to occur after a user-defined delay and can be repeated multiple
    times with a user-defined inter-execution interval.

    The actions will execute in a separate `thread
    <https://en.wikipedia.org/wiki/Thread_(computing)>`_, independent of (and in
    parallel with) the main state system.
parameters: 
  - 
    name: delay
    required: yes
    description: Initial delay before first execution (microseconds)
  - 
    name: duration
    required: yes
    description: Delay before each execution after the first (microseconds)
  - 
    name: repeats
    required: yes
    description: >
        Number of times to repeat execution.  The special value ``-999`` causes
        execution to repeat indefinitely (until the experiment stops or
        `cancel`_ is set to true).
  - 
    name: cancel
    description: >
        If set to the name of a variable, assigning a true value (e.g. ``true``,
        ``YES``, ``1``) to that variable will cancel all future executions of
        the contained actions


---


name: Conditionally Execute Actions (if)
signature: action/if
alias: action/when
isa: Action
allowed_child: Action
description: Execute a list of actions if a condition is true
parameters: 
  - 
    name: condition
    required: yes
    description: Condition expression


---


name: Unconditionally Execute Actions (else)
signature: action/else
alias: action/otherwise
isa: Action
allowed_child: Action
description: >
    Execute a list of actions unconditionally.  Useful only in conjunction with
    `Conditional Branching (if/else)`.


---


name: Conditional Branching (if/else)
signature: action/if_else
alias: action/choose
isa: Action
allowed_child:
  - Conditionally Execute Actions (if)
  - Unconditionally Execute Actions (else)
description: >
    Given a list of `Conditionally Execute Actions (if)` actions, executes the
    first one whose condition is true, or none if all conditions are false.  The
    list may include a single `Unconditionally Execute Actions (else)` action,
    which will be executed only if all the conditions are false.


---


name: Repeat Actions (while)
signature: action/while
isa: Action
allowed_child: Action
description: Execute a list of actions repeatedly while a condition is true
parameters: 
  - 
    name: condition
    required: yes
    description: Condition expression


---


name: Timer Action
abstract: yes
isa: Action
parameters: 
  - 
    name: duration
    required: yes
    example: 1.0
    description: Duration
  - 
    name: duration_units
    options: [us, ms, s]
    default: us
    description: Duration units
  - 
    name: timebase
    description: >
        If set to the name of a `timebase <Set Timebase>`, the expiration time
        will be measured relative to that timebase.  If omitted, the current
        time will be used as the timebase.


---


name: Wait
signature: action/wait
isa: Timer Action
description: Pause for a specified amount of time


---


name: Wait for Condition
signature: action/wait_for_condition
isa: Action
description: >
    Wait until a condition becomes true or a timeout occurs.  If the wait
    times out before the condition becomes true, issue an error message and
    (optionally) stop the experiment.
parameters: 
  - 
    name: condition
    required: yes
    description: Condition expression
  - 
    name: timeout
    required: yes
    description: Timeout duration (microseconds)
  - 
    name: timeout_message
    description: |
        Error message to report if the wait times out.  If omitted, a default
        message is used.

        To include the values of variables or arbitrary expressions in the
        message, you can use `variable and expression interpolation <Variable and
        Expression Interpolation>` (e.g. ``x = $x, y = ${y}, x+y = $(x+y)``).
  - 
    name: stop_on_timeout
    default: 'YES'
    description: If true, stop the experiment if the wait times out


---


name: Start Timer
signature: action/start_timer
isa: Timer Action
description: >
    Starts a named timer that can be used to control the flow through a `Task
    System`.  The `Timer Expired Transition` and the ``timerExpired`` function
    can be used to evaluate whether the timer has expired.
parameters: 
  - 
    name: timer
    required: yes
    example: MyTimer
    description: Name for the timer


---


name: Set Timebase
signature: action/set_timebase
isa: Action
description: >
    Sets a named reference time against which `timers <Start Timer>` can be
    defined
parameters: 
  - 
    name: timebase
    required: yes
    example: MyTimebase
    description: Name for the timebase


---


name: Stimulus Action
abstract: yes
isa: Action
parameters: 
  - 
    name: stimulus
    required: yes
    description: Name of the stimulus


---


name: Load Stimulus
signature: action/load_stimulus
isa: Stimulus Action
description: >
    Explicitly load a stimulus object (e.g. load a file from disk, compute a
    dynamically generated stimulus, etc.).  This is useful when the ``deferred``
    parameter on the stimulus is set to ``yes`` or ``explicit``.


---


name: Unload Stimulus
signature: action/unload_stimulus
isa: Stimulus Action
description: >
    Explicitly unload a stimulus object, thereby releasing any memory or other
    resources used by the stimulus.  This is useful when the ``deferred``
    parameter on the stimulus is set to ``yes`` or ``explicit``.


---


name: Queue Stimulus
signature: action/queue_stimulus
alias: action/show_stimulus
isa: Stimulus Action
description: >
    Place a stimulus into the display queue, ready to be displayed when
    the next `Update Stimulus Display` action is issued


---


name: Live Queue Stimulus
signature: action/live_queue_stimulus
isa: Stimulus Action
description: >
    Place a stimulus into the display queue, ready to be displayed when the next
    `Update Stimulus Display` action is issued.  Differs from `Queue Stimulus`
    in that values for variables controlling the appearance of the stimulus will
    remain malleable right up until the moment that the display is updated.


---


name: Dequeue Stimulus
signature: action/dequeue_stimulus
alias: action/hide_stimulus
isa: Stimulus Action
description: >
    Remove a stimulus from the display queue, so that it will no longer be
    displayed after the next `Update Stimulus Display` action is issued


---


name: Bring Stimulus to Front
signature: action/bring_stimulus_to_front
isa: Stimulus Action
description: Move a stimulus to the top of the display queue


---


name: Send Stimulus to Back
signature: action/send_stimulus_to_back
isa: Stimulus Action
description: Move a stimulus to the bottom of the display queue


---


name: Stimulus Display Action
abstract: yes
isa: Action
parameters: 
  - 
    name: display
    description: >
        Name of the display.  If omitted, the default display (if available)
        will be used.
  - 
    name: predicted_output_time
    description: >
        Name of a variable in which to store the predicted output time of the
        frame in which the action will take effect.  This time is the operating
        system's best guess for when the rendered frame will start to appear on
        screen.


---


name: Update Stimulus Display
signature: action/update_stimulus_display
alias: action/update_display
isa: Stimulus Display Action
description: |
    Commit pending changes to the display queue, and trigger a redraw of the
    stimulus display.  On the next display refresh, any stimuli that have been
    `queued <Queue Stimulus>` will be drawn, and any stimuli that have been
    `dequeued <Dequeue Stimulus>` will *not* be drawn (and thus will be erased
    if they were previously visible).

    *Note*: Before completing, this action waits for all drawing commands to be
    submitted to the graphics hardware.  However, it does *not* wait for the
    actual display update to occur.  If your experiment must coordinate other
    actions with the actual display update, it will need to wait until the time
    provided by `predicted_output_time`_.


---


name: Clear Stimulus Display
signature: action/clear_stimulus_display
alias: action/clear_display
isa: Stimulus Display Action
description: |
    Remove all stimuli from the display queue, and trigger a redraw of the
    stimulus display.  On the next display refresh, only the default background
    will be drawn.

    *Note*: Before completing, this action waits for all drawing commands to be
    submitted to the graphics hardware.  However, it does *not* wait for the
    actual display update to occur.  If your experiment must coordinate other
    actions with the actual display update, it will need to wait until the time
    provided by `predicted_output_time`_.


---


name: Sound Action
abstract: yes
isa: Action
parameters: 
  - 
    name: sound
    required: yes
    description: Name of the sound


---


name: Load Sound
signature: action/load_sound
isa: Sound Action
description: |
  Load a `sound <Sounds>`.

  If the sound is already loaded, this action does nothing.


---


name: Unload Sound
signature: action/unload_sound
isa: Sound Action
description: |
  Unload a `sound <Sounds>`.

  If the sound is not loaded, this action does nothing.


---


name: Play Sound
signature: action/play_sound
isa: Sound Action
description: |
  Play a `sound <Sounds>`.

  If the sound is not playing, it will begin playing immediately.  If the sound
  is `paused <Pause Sound>`, it will resume playing from the point at which it
  was paused.  If the sound is playing and not paused, this action does
  nothing.
parameters: 
  - 
    name: start_time
    example:
      - now() + 5s
      - next_frame_time()
    description: |
        Experiment time at which to start playing the sound (microseconds).

        If omitted, the sound will start playing immediately.


---


name: Pause Sound
signature: action/pause_sound
isa: Sound Action
description: |
  Pause a `sound <Sounds>`.

  If the sound is `playing <Play Sound>`, playback will pause and not resume
  until the sound is played again.  If the sound is not playing or already
  paused, this action does nothing.


---


name: Stop Sound
signature: action/stop_sound
isa: Sound Action
description: |
  Stop a `sound <Sounds>`.

  If the sound is `playing <Play Sound>` or `paused <Pause Sound>`, playback
  will end immediately, and the next playback will start at the beginning of
  the sound.  If the sound is neither playing nor paused, this action does
  nothing.


---


name: Accept Selections
signature: action/accept_selections
isa: Action
description: >
    Permanently accept the selections that have been made so far on a selectable
    object.  Once accepted, these selections cannot be undone with a `Reject
    Selections` action.
parameters: 
  - 
    name: selection
    required: yes
    description: Name of the selectable object


---


name: Reject Selections
signature: action/reject_selections
isa: Action
description: >
    Reject all non-accepted selections on a selectable object (i.e. those made
    since the last `Accept Selections` action).  From the point of view of the
    selectable object, it will be as if these selections were never made.
parameters: 
  - 
    name: selection
    required: yes
    description: Name of the selectable object


---


name: Reset Selections
signature: action/reset_selection
isa: Action
description: >
    Reset all selections on a selectable object, including any that were
    previously accepted.  From the point of view of the selectable object, it
    will be as if no selections were never made.
parameters: 
  - 
    name: selection
    required: yes
    description: Name of the selectable object


---


name: Next Selection
signature: action/next_selection
isa: Action
description: >
    Advance to the next selection on a `Selection Variable`.  This action
    does not work on other selectable objects (such as `Block` or `Trial`).
parameters: 
  - 
    name: selection
    required: yes
    description: Name of the selection variable


---


name: Pause Experiment
signature: action/pause_experiment
isa: Action
description: >
    Pause the experiment


---


name: Resume Experiment
signature: action/resume_experiment
isa: Action
description: >
    Resume a paused experiment


---


name: Stop Experiment
signature: action/stop_experiment
isa: Action
description: >
    Stop the experiment.  Gives an experiment the ability to terminate
    itself (e.g. in response to a fatal error).


---


name: Start IO Device
signature: action/start_device_io
alias: action/start_io_device
isa: Action
description: >
    Enable an `I/O device <Input/Output>`.  Most I/O devices will not perform
    input/output tasks until explicitly started.
parameters: 
  - 
    name: device
    required: yes
    description: Name of the I/O device to enable


---


name: Stop IO Device
signature: action/stop_device_io
alias: action/stop_io_device
isa: Action
description: >
    Disable an `I/O device <Input/Output>`.  Most I/O devices will stop
    performing input/output tasks when stopped.
parameters: 
  - 
    name: device
    required: yes
    description: Name of the I/O device to disable


---


name: Take Calibration Sample
signature: action/take_calibration_sample
isa: Action
description: >
    Instruct a calibrator object to take a new calibration sample.  The
    calibrator object takes both measured values and the corresponding "true"
    values (provided by a "calibratable" object) and uses them to determine a
    mapping function.
parameters: 
  - 
    name: calibrator
    required: yes
    description: Name of the calibrator
  - 
    name: calibratable_object
    required: yes
    description: Name of the calibratable object


---


name: Update Calibration
signature: action/update_calibration
isa: Action
description: >
    Prompt a calibrator object to compute a new calibration mapping
    function based on samples taken using the `Take Calibration Sample`
    action
parameters: 
  - 
    name: calibrator
    required: yes
    description: Name of the calibrator


---


name: Clear Calibration
signature: action/clear_calibration
isa: Action
description: >
    Prompt a calibrator object to "forget" all previously collected calibration
    samples.  A sufficient number of new samples must be obtained before a new
    calibration can be computed.
parameters: 
  - 
    name: calibrator
    required: yes
    description: Name of the calibrator


---


name: Begin Averaged Calibration Sample
signature: action/begin_calibration_average
isa: Action
description: |
    Instruct a calibrator object to start computing an average of its input
    value(s).

    The purpose of this action is to allow the user to calibrate against a time
    average over each of the input values, rather than against just the values
    at a particular instant in time.  This action prompts the specified
    calibrator to start averaging over its inputs.

    The averaging must be stopped with either of the `End Averaged Calibration
    Sample` or `End Averaged Calibration and Ignore` actions.  Thus, the total
    time to average is at the user's discretion and is generally based on either
    a sufficient time or the fact that another condition has arisen (e.g.
    fixation broken for eye calibrators).
parameters: 
  - 
    name: calibrator
    required: yes
    description: Name of the calibrator


---


name: End Averaged Calibration and Ignore
signature: action/end_calibration_average_and_ignore
isa: Action
description: >
    Instruct a calibrator object to stop computing an average of its input
    value(s) and discard the accumulated data
parameters: 
  - 
    name: calibrator
    required: yes
    description: Name of the calibrator


---


name: End Averaged Calibration Sample
signature: action/end_calibration_average_and_take_sample
isa: Action
description: >
    Instruct a calibrator object to stop computing an average of its input
    value(s) and take a new calibration sample from the accumulated average,
    with the specified "calibratable" object providing the corresponding "true"
    value
parameters: 
  - 
    name: calibrator
    required: yes
    description: Name of the calibrator
  - 
    name: calibratable_object
    required: yes
    description: Name of the calibratable object


---


name: Play Dynamic Stimulus
signature: action/play_dynamic_stimulus
isa: Action
description: Start playing a dynamic stimulus
parameters: 
  - 
    name: stimulus
    required: yes
    description: Name of the dynamic stimulus


---


name: Stop Dynamic Stimulus
signature: action/stop_dynamic_stimulus
isa: Action
description: Stop a dynamic stimulus
parameters: 
  - 
    name: stimulus
    required: yes
    description: Name of the dynamic stimulus


---


name: Pause Dynamic Stimulus
signature: action/pause_dynamic_stimulus
isa: Action
description: Pause a playing dynamic stimulus
parameters: 
  - 
    name: stimulus
    required: yes
    description: Name of the dynamic stimulus


---


name: Unpause Dynamic Stimulus
signature: action/unpause_dynamic_stimulus
isa: Action
description: Unpause (i.e. resume playing) a paused dynamic stimulus
parameters: 
  - 
    name: stimulus
    required: yes
    description: Name of the dynamic stimulus


---


###############################################################################
#
# Transitions
#
###############################################################################


name: Transition
abstract: yes
group: Transitions


---


name: Always Go Transition
signature: transition/direct
isa: Transition
description: A transition that always goes to the specified target state
parameters: 
  - 
    name: target
    required: yes
    description: Name of the target state


---


name: Conditional Transition
signature: transition/conditional
isa: Transition
description: >
    A transition that goes to the target state if a specified condition
    expression is true
parameters: 
  - 
    name: condition
    required: yes
    description: Condition expression
  - 
    name: target
    required: yes
    description: Name of the target state


---


name: Goto Transition
signature: transition/goto
isa: Transition
description: >
    A transition that goes to the target state either unconditionally or, if
    `when`_ is provided, only when the specified condition expression is true.
    Hence, it can fill the role of both the `Always Go Transition` and the
    `Conditional Transition`.
parameters: 
  - 
    name: target
    required: yes
    description: Name of the target state
  - 
    name: when
    description: >
        Condition expression.  If omitted, the transition always goes to the
        target state.


---


name: Timer Expired Transition
signature: transition/timer_expired
isa: Transition
description: >
    A transition that goes to the target state if a specified timer has expired
parameters: 
  - 
    name: timer
    required: yes
    description: Name of the timer
  - 
    name: target
    required: yes
    description: Name of the target state


---


name: Exit Task System
signature: transition/yield
isa: Transition
description: >
    A transition that yields control back to the parent of the current
    `Task System`


---


###############################################################################
#
# Input/output
#
###############################################################################


name: IODevice
abstract: yes
group: Input/Output
toplevel: yes
parameters:
  - 
    name: autostart
    default: 'NO'
    description: |
        If ``YES``, the device will start I/O automatically (as if by an
        implicit `Start IO Device` action) when the experiment starts running.

        *Note*: Device I/O will always stop automatically when the experiment
        stops running, irrespective of this setting.
  - 
    name: alt
    description: >
        Alternative device to use if this one fails to initialize (e.g. because
        the required hardware is not available).  If ``#allowAltFailover`` is
        set to 0 or false, this parameter is ignored.


---


name: IOChannel
abstract: yes
group: Input/Output


---


name: Data File
signature: iodevice/data_file
isa: IODevice
description: |
    By default, opening and closing of data files (aka event files) is
    controlled via MWClient.  By including a data file device in your
    experiment, you can transfer responsibility for data-file management to the
    experiment itself.

    If an experiment includes a data file device, a data file will be opened
    automatically when the experiment starts running.  If a data file with the
    specified `filename`_ is already open (e.g. because this is the second run
    of a protocol), then the existing file remains open.  If a data file with a
    different name is open, that file is closed before the new file is created.
    If a data file with the specified filename already exists and is not
    currently open, the existing file will *not* be overwritten.  If opening the
    data file fails for this or any other reason, the experiment will not start.

    While an experiment with a data file device is loaded, data files cannot be
    opened or closed via MWClient.  However, the client will still
    display the name of the current data file.

    *Note*: An experiment can include only one data file device.  Also, `Start
    IO Device`, `Stop IO Device`, and `autostart`_ have no effect on this
    device.
parameters: 
  - 
    name: filename
    required: yes
    example:
      - my_file
      - my_experiment/${subject}/run-${run_counter}
      - /Volumes/Data/exp1/$(date("%Y%m%d-%H%M%S"))
    description: |
        Filesystem path and name for the data file, excluding the file
        extension (``.mwk2``), which is appended automatically.

        If the filename is a relative path (i.e. it does not begin with ``/``),
        then the `standard data-file directory <Accessing the Event File>` is
        prepended to it before the file is created.  Absolute paths are not
        modified.

        Typically, the filename will make use of `variable and/or expression
        interpolation <Variable and Expression Interpolation>` to ensure that
        each experimental session produces a unique data file.  The interpolated
        components of the filename are re-evaluated each time the experiment
        starts, so changes to variable values and expression results between
        runs in a given session will result in different filenames for each run.


---


name: Stimulus Display
signature: iodevice/stimulus_display
isa: IODevice
description: |
    A stimulus display device.

    By including a stimulus display device definition in your experiment file,
    you can configure the default display or create one or more non-default
    displays.  (See below for more information.)

    *Note*: `Start IO Device`, `Stop IO Device`, and `autostart`_ have no effect
    on this device.

    .. rubric:: Default Display

    If an experiment requires a stimulus display (e.g. because it includes one
    or more `stimuli <Stimuli>`) but does not define a stimulus display device,
    it will create a display automatically.  This display is called the
    :term:`default stimulus display`.

    If you want to configure the default display (e.g. change its background
    color or enable frame capture), add a stimulus display device with no
    `display_info`_ parameter to your experiment, and set its other parameters
    as desired.  Note that only one stimulus display device can configure the
    default display.

    .. rubric:: Non-Default Displays

    If your experiment defines one or more stimulus display devices with
    non-empty `display_info`_ parameters, it will *not* create a default
    stimulus display.  Instead, each stimulus display definition will create
    and configure a non-default display.

    Because the default display is not available, all `stimulus <Stimuli>`
    definitions and display-related actions (e.g. `Update Stimulus Display`)
    must specify explicitly which display to use.  If not, the experiment will
    fail to load.

    Note that if an experiment that defines non-default displays includes a
    stimulus display device with no `display_info`_ parameter, that device will
    *not* configure the default display (which does not exist). Instead, it
    will create another non-default display that takes its configuration
    information from `mainScreenInfo var`.

parameters: 
  - 
    name: display_info
    example: { 'display_to_use': 1, 'width': 400, 'height': 300, 'distance': 200 }
    description: |
        Dictionary containing configuration information for the display.  The
        keys and values are the same as those used with `mainScreenInfo var`.

        If omitted, the value of `mainScreenInfo var` is used.
  - 
    name: background_color
    default: 0.5,0.5,0.5
    description: >
        The background color, expressed as a comma-separated list of red, green,
        and blue components.  Each component may be described by any valid
        expression, but the expression must result in a value between 0 and 1
        (inclusive).
  - 
    name: background_alpha_multiplier
    default: 1.0
    description: |
        Controls the transparency of the background.  ``1.0`` is fully opaque,
        while ``0.0`` is fully tranparent.

        *Note*: To enable background transparency, you must set
        `display_info`_'s  ``make_window_opaque`` key to ``false``.  To make
        the stimulus display window fully transparent, set this parameter and
        all components of `background_color`_ to 0.
  - 
    name: redraw_on_every_refresh
    default: 'NO'
    description: >
        If ``YES``, the display will be redrawn during every refresh cycle.  If
        ``NO``, the display will be redrawn only when needed or when explicitly
        requested via `Update Stimulus Display`.
  - 
    name: announce_stimuli_on_implicit_updates
    default: 'YES'
    description: >
        Controls the announcement of stimuli during "implicit" display updates
        (i.e. updates requested by running dynamic stimuli and *not* triggered
        by an explicit `Update Stimulus Display` action).  If set to ``NO``,
        values assigned to `update_variable`_ for implicit updates will contain
        only the number of stimuli displayed (in place of the usual list of
        stimulus parameters).
  - 
    name: update_variable
    description: |
        Variable in which to store update announcements for the display.  The
        announcements have the same format as those assigned to
        `stimDisplayUpdate var`.

        If omitted, `stimDisplayUpdate var` is used.
  - 
    name: capture_format
    options: [none, JPEG, PNG]
    default: none
    description: |
        Format in which to capture display frames.

        If ``none``, display frames will not be captured.  Otherwise, for every
        display redraw for which `capture_enabled`_ evaluates to true, the
        contents of the display will be captured in the specified format, at the
        resolution determined by `capture_height_pixels`_, and stored (as binary
        data) in the variable specified by `capture_variable`_.
  - 
    name: capture_height_pixels
    default: 0
    description: |
        Height (in pixels) of captured display frames.

        If the value of this parameter is less than or equal to zero, frames
        will be captured at the full height and width of the display. 
        Otherwise, each frame will be scaled down to the specified height, with
        the width chosen to match the aspect ratio of the display.

        *Note*: The cost of frame capture, in terms of both CPU usage and
        required storage space, depends almost entirely on the size of the
        captured frames.  If you experience performance issues with capture
        enabled, try reducing the value of this parameter.
  - 
    name: capture_enabled
    default: 'YES'
    description: |
        If `capture_format`_ is not ``none``, every time the display redraws, it
        will test the value of this parameter.  If the parameter evaluates to a
        true value (e.g. ``1``, ``true``), the current frame will be captured.

        By setting this parameter to the name of a variable, your experiment can
        dynamically enable or disable frame capture by assigning a true or false
        value, respectively, to the variable.  This allows you to capture frames
        only when needed.
  - 
    name: capture_variable
    description: |
        Variable in which to store captured display frames.  If omitted,
        `stimDisplayCapture var` is used.


---


###############################################################################
#
# Filters
#
###############################################################################


name: Calibrator
abstract: yes
group: Filters
toplevel: yes


---


name: Base Eye Calibrator
abstract: yes
isa: Calibrator
parameters: 
  - 
    name: eyeh_raw
    required: yes
    description: >
        Variable from which to read the raw (input) horizontal eye
        position
  - 
    name: eyev_raw
    required: yes
    description: >
        Variable from which to read the raw (input) vertical eye
        position
  - 
    name: eyeh_calibrated
    required: yes
    description: >
        Variable in which to store the calibrated (output)
        horizontal eye position
  - 
    name: eyev_calibrated
    required: yes
    description: >
        Variable in which to store the calibrated (output)
        vertical eye position


---


name: Eye Calibrator
signature: calibrator/standard_eye_calibrator
isa: Base Eye Calibrator
description: >
    An I/O calibrator specially tailored for eye movement signals.  Uses a
    second-order (quadratic) fit function.


---


name: Linear Eye Calibrator
signature: calibrator/linear_eye_calibrator
isa: Base Eye Calibrator
description: >
    An I/O calibrator specially tailored for eye movement signals.  Uses a
    first-order (linear) fit function.


---


name: Filter
abstract: yes
group: Filters
toplevel: yes


---


name: Box-car Filter
signature: filter/boxcar_filter_1d
isa: Filter
description: A basic 1-D boxcar (moving average) filter
parameters: 
  - 
    name: in1
    required: yes
    description: Variable from which to read input values
  - 
    name: out1
    required: yes
    description: Variable in which to store output values
  - 
    name: width_samples
    required: yes
    description: >
        Number of samples to store in memory and average over


---


name: Eye Monitor
signature: filter/basic_eye_monitor
isa: Filter
description: >
    A filter that takes in an eye signal and outputs basic parameters, such
    as velocity, saccade state, etc.
parameters: 
  - 
    name: eyeh_calibrated
    required: yes
    description: >
        Variable from which to read horizontal eye position
  - 
    name: eyev_calibrated
    required: yes
    description: >
        Variable from which to read vertical eye position
  - 
    name: eye_state
    required: yes
    description: >
        Variable in which to store computed eye state (0 for
        fixation, 1 for saccade)
  - 
    name: eye_velocity_h
    description: >
        Variable in which to store computed horizontal eye velocity
        (units per second)
  - 
    name: eye_velocity_v
    description: >
        Variable in which to store computed vertical eye velocity
        (units per second)
  - 
    name: width_samples
    required: yes
    description: >
        Number of samples to store in internal `boxcar filters <Box-car Filter>`
        that are applied to computed velocity components
  - 
    name: saccade_entry_speed
    required: yes
    description: >
        A computed eye speed greater than this speed denotes a saccade
        (units per second)
  - 
    name: saccade_exit_speed
    required: yes
    description: >
        A computed eye speed less than or equal to this speed indicates
        fixation (units per second)


---


###############################################################################
#
# Optimizers and variable monitors
#
###############################################################################


name: Optimizer
abstract: yes
group: Optimizers and Variable Monitors
toplevel: yes


---


name: Simple Staircase Optimizer
signature: staircase
isa: Optimizer
description: >
    An object that watches a variable (e.g. a flag reporting success in a
    behavioral task) and moves another variable up and down according to
    some criteria
parameters: 
  - 
    name: watch
    required: yes
    description: Variable to watch
  - 
    name: output
    required: yes
    description: Variable to vary
  - 
    name: lower_limit
    required: yes
    description: Lower bound for output
  - 
    name: upper_limit
    required: yes
    description: Upper bound for output
  - 
    name: up_criterion
    required: yes
    description: >
        If watched variable value is greater than or equal to this value,
        output steps up
  - 
    name: down_criterion
    required: yes
    description: >
        If watched variable value is less than or equal to this value,
        output steps down
  - 
    name: step_size
    required: yes
    description: Step size for changing output
  - 
    name: grace_period
    required: yes
    description: >
        Don't step anywhere unless watched variable has been updated at least
        this many times
  - 
    name: history
    required: yes
    description: >
        Number of samples to store in internal `boxcar filter <Box-car Filter>`
        used to average watched variable values


---


name: Bias Monitor
signature: bias_monitor
isa: Optimizer
description: >
    An object that watches parameters of a behavioral task and assesses the
    probability that the subject is adopting some form of biased strategy
parameters: 
  - 
    name: success
    required: yes
    description: >
        Variable that indicates task success/failure (via a value
        of 1 or 0, respectively)
  - 
    name: response_index
    required: yes
    description: >
        Variable that indicates e.g. physical response location
        (relevant value is when success changes)
  - 
    name: task_correlation
    required: yes
    description: >
        Variable in which to store extent to which responses are
        consistent with the task
  - 
    name: response_bias_correlation
    required: yes
    description: >
        Variable in which to store extent to which responses are
        consistent with a response bias
  - 
    name: alternation_correlation
    required: yes
    description: >
        Variable in which to store extent to which responses are
        consistent with alternation
  - 
    name: history
    required: yes
    description: Number of observations to average over
  - 
    name: grace_period
    required: yes
    description: >
        Don't do anything unless you have at least this many observations


---


###############################################################################
#
# Resources
#
###############################################################################


name: Resource
abstract: yes
group: Resources
toplevel: yes


---


name: File Resource
signature: resource
isa: Resource
description: >
    A file or set of files required by an experiment
parameters: 
  - 
    name: path
    required: yes
    example: [images/1.png, sounds, /shared/imagesets/01/]
    description: >
        Filesystem path to the required file or directory.  If a directory, all
        non-hidden, regular files in the directory are copied, including those
        in nested subdirectories.
