#!/usr/bin/env python3

from io import StringIO
from optparse import OptionParser
import os
import random
from subprocess import call, check_call, check_output, Popen, PIPE
import sys
from tempfile import NamedTemporaryFile
from xml.dom import minidom
import xml.etree.ElementTree as etree


available_features = set()
server_address = None
skip_unit_tests = False

tests_dir = '/Library/Application Support/MWorks/Developer/tests'
test_file_dir = os.path.join(tests_dir, 'XML')

arch = '/usr/bin/arch'
valid_arch_names = ('x86_64',)
mworks_core_test_runner = os.path.join(tests_dir, 'MWorksCoreTestRunner')
marionette_test = os.path.join(tests_dir, ('MarionetteTest.app/Contents/'
                                           'MacOS/MarionetteTest'))

test_file_extensions = ('.xml', '.mwel', '.mwtest')
test_data_suffix = 'TESTDATA.xml'


marionette_prep_applescript = """

-- Ensure that audio isn't muted
if (output muted of (get volume settings)) then
    set volume output muted false
end if

-- Ensure minimum output volume
set minVolume to 10
if (output volume of (get volume settings)) < minVolume then
    set volume output volume minVolume
end if

-- Activate MWServer
activate application "/Applications/MWServer.app"
repeat until application "/Applications/MWServer.app" is running
    delay 1
end repeat

"""


quit_server_applescript = """

quit application "/Applications/MWServer.app"
repeat while application "/Applications/MWServer.app" is running
    delay 1
end repeat

"""


def error(status, msg, *args):
    sys.stderr.write('ERROR: ' + (msg % args) + '\n')
    sys.exit(status)


def demangle_name(name):
    return check_output(['/usr/bin/c++filt', name])


def run_applescript(script):
    cmd = Popen(['/usr/bin/osascript'], stdin=PIPE)
    cmd.communicate(script.encode('utf-8'))
    if cmd.returncode != 0:
        error(cmd.returncode, 'osascript command failed')


def run_unit_tests(arch_name, test_names=None):
    with NamedTemporaryFile() as output:
        args = [arch, '-arch', arch_name, mworks_core_test_runner, output.name]
        if test_names:
            args.extend(test_names)

        status = call(args)
        if status not in (0, 1):
            error(status, '%s quit unexpectedly',
                  os.path.basename(mworks_core_test_runner))

        results = minidom.parse(output)

    failed_tests = results.getElementsByTagName('FailedTests')[0]
    failed_tests = [test.firstChild.data for test in
                    failed_tests.getElementsByTagName('Name')]

    # Ensure consistent output order for test names
    failed_tests.sort()

    return failed_tests


def iter_marionette_tests(top_dir=test_file_dir):
    for root, dirs, files in os.walk(top_dir):
        for f in files:
            if ((os.path.splitext(f)[1] in test_file_extensions) and
                (not f.endswith(test_data_suffix))):
                yield os.path.join(root, f)


def run_marionette_tests(arch_name, test_names=None):
    if not test_names:
        test_file_iter = iter_marionette_tests
        # We're running all the tests, so this is probably an automated
        # run.  Ensure that the display is awake.
        check_call(['/usr/bin/caffeinate', '-u', '-t', '20'])
    else:
        def test_file_iter():
            for test in test_names:
                if not os.path.exists(test):
                    test = os.path.join(test_file_dir, test)
                if not os.path.isdir(test):
                    yield test
                else:
                    for t in iter_marionette_tests(test):
                        yield t

    # Randomize test order to increase our chances of catching bad
    # interactions between different core components
    all_test_names = list(test_file_iter())
    random.shuffle(all_test_names)

    if not server_address:
        # Ensure that server starts fresh
        run_applescript(quit_server_applescript)

    failed_tests = []

    for test_num, test_file in enumerate(all_test_names):
        if not os.path.isfile(test_file):
            error(3, 'no such file: "%s"', test_file)

        args = [arch, '-arch', arch_name, marionette_test, test_file]

        for test_data in ((os.path.splitext(test_file)[0] + '.' +
                           test_data_suffix),
                          os.path.join(os.path.dirname(test_file),
                                       test_data_suffix)):
            if os.path.isfile(test_data):
                args.append(test_data)

                # Determine feature requirements
                test_data_tree = etree.parse(test_data)
                required_features = \
                    set(e.attrib['name'] for e in
                        test_data_tree.iterfind('.//requirements/feature'))
                missing_features = required_features - available_features

                break
        else:
            missing_features = None

        if test_file.startswith(test_file_dir):
            test_name = test_file[len(test_file_dir)+1:]
        else:
            test_name = test_file

        print('(%d/%d) %s:' %  (test_num + 1, len(all_test_names), test_name), end=' ')
        sys.stdout.flush()

        if missing_features:
            print('skipped (requires %s)' % ', '.join(missing_features))
            continue

        # For OS X 10.7: Remove any saved state, which can lead to a
        # "Restore Windows" dialog that hangs MarionetteTest until
        # it's dismissed
        saved_state_dir = os.path.expanduser(
            '~/Library/Saved Application State/'
            'org.mworks-project.MarionetteTest.savedState'
            )
        if os.path.isdir(saved_state_dir):
            check_call(['/bin/rm', '-Rf', saved_state_dir])

        if not server_address:
            run_applescript(marionette_prep_applescript)

        env = os.environ.copy()
        if server_address:
            env['MARIONETTE_SERVER_ADDRESS'] = server_address

        cmd = Popen(args, env=env, stderr=PIPE)
        output = cmd.communicate()[1]
        if cmd.returncode == 0:
            print('OK')
        else:
            print('error')
            for line in output.strip().split('\n'):
                print('    >', line)
            failed_tests.append(test_name)

    if not server_address:
        # Quit server
        run_applescript(quit_server_applescript)

    # Ensure consistent output order for test names
    failed_tests.sort()

    return failed_tests


def run_tests(arch_name, unit_test_names, marionette_test_names):
    failed_tests = []

    if unit_test_names:
        failed_tests.extend(run_unit_tests(arch_name, unit_test_names))
    elif not (marionette_test_names or skip_unit_tests):
        failed_tests.extend(run_unit_tests(arch_name))

    if marionette_test_names:
        failed_tests.extend(run_marionette_tests(arch_name,
                                                 marionette_test_names))
    elif not unit_test_names:
        failed_tests.extend(run_marionette_tests(arch_name))

    print()
    if not failed_tests:
        print('ALL TESTS PASS')
    else:
        print('FAILURES:\n')
        for test_name in failed_tests:
            print('    %s' % test_name)
    print()

    return failed_tests


def main():
    global server_address, skip_unit_tests

    op = OptionParser(usage='Usage: %prog [options] [test_name ...]')
    op.add_option('--arch',
                  type = 'choice',
                  choices = valid_arch_names,
                  default = valid_arch_names[0],
                  help = 'use specified CPU architecture')
    op.add_option('--features',
                  default = '',
                  help = 'available features (as a comma-separated list)')
    op.add_option('--server-address',
                  default = '',
                  help = 'address of running MWServer instance')
    op.add_option('--skip-unit-tests',
                  action = 'store_true',
                  help = 'do not run unit tests')

    (opts, args) = op.parse_args()

    available_features.update(name.strip() for name in
                              opts.features.split(',') if name.strip())
    server_address = opts.server_address
    skip_unit_tests = opts.skip_unit_tests

    unit_test_names = []
    marionette_test_names = []

    for name in args:
        if b'::' in demangle_name(name):
            unit_test_names.append(name)
        else:
            marionette_test_names.append(name)

    failed_tests = run_tests(opts.arch, unit_test_names, marionette_test_names)

    sys.exit(bool(failed_tests))


if __name__ == '__main__':
    main()
