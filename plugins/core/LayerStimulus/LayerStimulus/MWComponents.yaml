---


name: Layer Stimulus
signature: stimulus/layer
isa: Basic Transform Stimulus
allowed_child: Stimulus
description: |
    A layer is a container for other stimuli.  When displayed, it first renders
    its child stimuli into a single scene, against a transparent background. It
    then draws this composite scene on the stimulus display.

    The position and rotation specified by stimuli within a layer are
    interpreted as relative to the position and rotation of the layer itself.
    Hence, by changing a layer's `x_position`_, `y_position`_, and/or
    `rotation`_ parameters, you can move a layer and its contents without
    needing to change the parameters of any child stimuli.

    If one of a layer's children is a `mask <Mask Stimulus>`, the "masked out"
    regions become transparent or semi-transparent "windows", through which any
    stimuli below the layer are visible.  For example, when displayed together,
    the following stimuli produce a red circle inside a green square::

        rectangle the_background (
            color = 0,1,0
            x_size = 10
            )

        layer the_layer {
            rectangle (
                color = 1,0,0
                x_size = 10
                )
            mask (
                mask = ellipse
                x_size = 10
                )
        }
parameters: 
  - 
    name: fullscreen
    default: 'YES'
    description: |
        If ``YES``, the stimulus is sized to fill the display.  In this mode,
        `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are
        ignored.

        *Note*: Fullscreen layers consume a large amount of texture memory on
        the graphics hardware.  Use them only when necessary.
  - 
    name: max_size_x
    description: |
        Maximum horizontal size (degrees).

        If omitted, the maximum horizontal size is set to the value of `x_size`_
        when the stimulus is loaded.
  - 
    name: max_size_y
    description: |
        Maximum vertical size (degrees).

        If omitted, the maximum vertical size is set to the value of `y_size`_
        when the stimulus is loaded.


---


name: Mask Stimulus
signature: stimulus/mask
isa: Transform Stimulus
description: |
    A mask can truncate, obscure, or erase stimuli that lie below it.

    Masks operate in two different modes.  The first mode requires that the mask
    be contained in a `layer <Layer Stimulus>` and applies when the mask's
    `color`_ parameter is omitted.  In this mode, the "masked out" regions
    become transparent or semi-transparent "windows", through which any stimuli
    below the layer are visible.  If the mask is `inverted`_, it will make
    a "hole" through the stimuli under it, allowing the stimuli beneath the
    layer to show through.  For example, the following layer will produce a red
    ring with inner radius 5 and outer radius 10::

        layer the_layer {
            circle (
                color = 1,0,0
                x_size = 20
                )
            mask (
                mask = ellipse
                inverted = true
                x_size = 10
                )
        }

    The second mode applies when a `color`_ is specified.  In this mode, the
    "masked out" regions are blended with or replaced by the mask's color; no
    `layer <Layer Stimulus>` is required.  If the mask's color matches the color
    of the background, the mask can effectively "fade" the stimuli below it in
    to the background.  For example, when displayed together, the following
    stimuli produce a blue circle whose edge fades in to the default, 50% gray
    background::

        rectangle the_rectangle (
            color = 0,0,1
            x_size = 10
            )

        mask the_mask (
            mask = raised_cosine
            color = 0.5, 0.5, 0.5
            x_size = 10
            )

parameters: 
  - 
    name: mask
    required: yes
    options: [rectangle, ellipse, gaussian, raised_cosine]
    description: Mask type
  -
    name: inverted
    default: 'NO'
    description: >
        If ``YES``, the effect of the mask is inverted: Areas of the display
        that normally would be visible through the mask are hidden, and areas
        that normally would be hidden are visible.
  - 
    name: std_dev
    default: 1.0
    description: |
        Standard deviation of Gaussian mask.

        The Gaussian mask is computed on a 2x2 square, centered at the origin,
        using the equation::

            exp(-1.0 * (dist - mean) * (dist - mean) / (2.0 * std_dev * std_dev))

        where ``dist`` is distance from the center.  The mask is then stretched
        to cover a rectangle of `x_size`_ by `y_size`_ degrees.  If the x and y
        sizes are equal, then the mask is scaled by size/2 in both directions,
        so std_dev has units of size/2 degrees.
  - 
    name: mean
    default: 0.0
    description: |
        Mean of Gaussian mask.

        This value determines the radial offset of the Gaussian peak from the
        center of the mask.  If non-zero, the peak will be a circle, rather than
        a point, and luminance will decrease both inside and outside the circle,
        producing a toroidal mask.
  -
    name: normalized
    default: 'NO'
    description: >
        If ``YES``, the Gaussian mask includes a multiplicative normalization
        term (``1/(std_dev*sqrt(2*pi))``).  If ``NO``, this term is omitted.
  - 
    name: edge_width
    default: 0.125
    description: |
        Edge width of raised cosine mask.

        This value specifies the width of the sinusoidal edge as a fraction of
        the total width (i.e. diameter) of the mask.  It should be greater than
        zero and less than or equal to 0.5.
  - 
    name: color
    example: 0.5,0.5,0.5
    description: >
        The color of the mask, expressed as a comma-separated list of red,
        green, and blue components.  Each component may be described by any
        valid expression, but the expression must result in a value between 0
        and 1 (inclusive).


