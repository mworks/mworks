///////////////////////////////////////////////////////////////////////////////
//
// Stimulus display
//
///////////////////////////////////////////////////////////////////////////////


stimulus_display (
    background_color = 0,0,0
    )


///////////////////////////////////////////////////////////////////////////////
//
// Ball
//
///////////////////////////////////////////////////////////////////////////////


var ball_size = 10

%define ball_position_x_max = (display_bounds('right') - display_bounds('left') - ball_size) / 2
%define ball_position_x_min = -ball_position_x_max
%define ball_position_y_max = (display_bounds('top') - display_bounds('bottom') - ball_size) / 2
%define ball_position_y_min = -ball_position_y_max

var ball_speed = 20  // Degrees per second
var ball_heading = 0  // Degrees
var ball_position_x = 0
var ball_position_y = 0

circle ball (
    color = 1,0,0
    x_size = ball_size
    x_position = ball_position_x
    y_position = ball_position_y
    )

var current_elapsed_time = 0
var previous_elapsed_time = 0

%define ball_delta_r = ball_speed * (current_elapsed_time - previous_elapsed_time) / 1e6
%define ball_heading_radians = ball_heading * pi() / 180

%define update_ball_heading (new_heading)
    ball_heading = fmod(new_heading, 360)
%end

render_actions update_ball (elapsed_time = current_elapsed_time) {
    if (previous_elapsed_time == 0) {
        previous_elapsed_time = current_elapsed_time
    }

    ball_position_x += ball_delta_r * cos(ball_heading_radians)
    ball_position_y += ball_delta_r * sin(ball_heading_radians)

    choose {
        when ((cos(ball_heading_radians) < 0 and ball_position_x <= ball_position_x_min) or
              (cos(ball_heading_radians) > 0 and ball_position_x >= ball_position_x_max)) {
            update_ball_heading (180 - ball_heading)
        }
        when ((sin(ball_heading_radians) < 0 and ball_position_y <= ball_position_y_min) or
              (sin(ball_heading_radians) > 0 and ball_position_y >= ball_position_y_max)) {
            update_ball_heading (-ball_heading)
        }
    }

    previous_elapsed_time = current_elapsed_time
}


///////////////////////////////////////////////////////////////////////////////
//
// Protocol
//
///////////////////////////////////////////////////////////////////////////////


protocol {
    ball_position_x = 0
    ball_position_y = 0
    ball_heading = rand(0, 360)  // Random heading
    previous_elapsed_time = 0

    queue_stimulus (update_ball)
    live_queue_stimulus (ball)
    update_display ()

    wait (60s)
}
