<?xml version="1.0"?>
<monkeyml version="1.0">
    
    <filters>
        <filter tag="eyeMonitor" full_name="eyeMonitor" id="" type="basic_eye_monitor" eyeh_calibrated="eye_h" eyev_calibrated="eye_v" eye_state="saccade" width_samples="5" saccade_entry_speed="200" saccade_exit_speed="150"/>
    </filters>
    
    
    <io_devices>
        <iodevice tag="s1_Fake_Monkey" priority="" type="fake_monkey" id="">
            <iochannel type="eye_movement" eye_v="eye_v_raw" eye_h="eye_h_raw" data_interval="1ms" update_interval="10ms"/>
            <iochannel variable="reward" type="juice"/>
        </iodevice>

    </io_devices>
	<calibrators>
        <calibrator tag="eyeCalibrator" full_name="eyeCalibrator" type="standard_eye_calibrator" eyeh_raw="eye_h_raw" eyev_raw="eye_v_raw" eyeh_calibrated="eye_h" eyev_calibrated="eye_v"/>
    </calibrators>
    
    
    <variables>
        <variable tag="saccade" full_name="saccade" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"/>
        <variable tag="eye_h_raw" full_name="eye_h_raw" default_value="0" scope="GLOBAL" type="DOUBLE" editable="never" logging="never"/>
        <variable tag="eye_v_raw" full_name="eye_v_raw" default_value="0" scope="GLOBAL" type="DOUBLE" editable="never" logging="never"/>
        <variable tag="eye_h" full_name="eye_h" default_value="0" scope="GLOBAL" type="DOUBLE" editable="never" logging="when_changed"/>
        <variable tag="eye_v" full_name="eye_v" default_value="0" scope="GLOBAL" type="DOUBLE" editable="never" logging="when_changed"/>
        <variable tag="reward" full_name="reward" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"/>
        <variable tag="clicks" full_name="click" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"/>
        <variable tag="metronome_rotation" full_name="metronome rotation" default_value="0" scope="GLOBAL" type="DOUBLE" editable="never" logging="when_changed"/>
        <variable tag="metronome_increment" full_name="metronome increment" default_value="10" scope="GLOBAL" type="DOUBLE" editable="never" logging="when_changed"/>
    </variables>
    
    
    
    <stimuli>
        <stimulus tag="blank screen" full_name="blank screen" type="blank_screen" color="0.5,0.5,0.5"/>
        <stimulus tag="dog" full_name="Dog" type="image_file" path="dog.png" x_size="15" y_size="15" x_position="0" y_position="0" rotation="metronome_rotation"/>
    </stimuli>
    
    
    <experiment tag="Metronome" full_name="Metronome Experiment">
	
        <protocol tag="tick tock protocol" full_name="Tick Tock Test" selection="sequential_ascending" nsamples="1" sampling_method="cycles">
            <block tag="tick tock block" selection="sequential_ascending" nsamples="1" sampling_method="cycles">
               
                <trial tag="tick tock trial" selection="sequential_ascending" nsamples="1" sampling_method="cycles">
                    
                    <task_system tag="StartIO_TS">
                        <task_system_state tag="StartIO_state">
                            <action type="start_device_IO" device="s1_Fake_Monkey"/>
                            <action type="set_timebase" timebase="the_beginning_of_time"/>
                            <transition type="yield"/>
                        </task_system_state>
                    </task_system>
                    
                    <list tag="tick_tock_list" selection="sequential_ascending" nsamples="30" sampling_method="cycles">
                        
                        <task_system tag="tick_tock_TS">
                            <task_system_state tag="rising">
                                <action type="show_stimulus" stimulus="blank screen"/>
                                <action type="show_stimulus" stimulus="dog"/>
                                <action type="set_timebase" timebase="frame"/>
                                <action type="update_stimulus_display"/>
                                <action type="start_timer" timer="rising_timer" timebase="the_beginning_of_time" duration="2 * clicks * 16667us"/>
                                <action type="assignment" variable="clicks" value="clicks + 1"/>
                                <action type="assignment" variable="metronome_rotation" value="metronome_rotation + metronome_increment"/>
                                <transition type="conditional" condition="metronome_rotation #GE 30" target="tick"/>
                                <transition type="timer_expired" timer="rising_timer" target="rising"/>
                            </task_system_state>
                            
                            <task_system_state tag="tick">
                                <action type="assignment" variable="reward" value="1"/>
                                <action type="report" message="TICK"/>
                                <transition target="falling"/>
                            </task_system_state>
                            
                            <task_system_state tag="falling">
                                <action type="show_stimulus" stimulus="blank screen"/>
                                <action type="show_stimulus" stimulus="dog"/>
                                <action type="set_timebase" timebase="frame2"/>
                                <action type="update_stimulus_display"/>
                                <action type="start_timer" timer="falling_timer" timebase="the_beginning_of_time" duration="2 * clicks * 16667us"/>
                                <action type="assignment" variable="clicks" value="clicks + 1"/>
                                <action type="assignment" variable="metronome_rotation" value="metronome_rotation - metronome_increment"/>
                                <transition type="conditional" condition="metronome_rotation #LE -30" target="tock"/>
                                <transition type="timer_expired" timer="falling_timer" target="falling"/>
                            </task_system_state>
                            
                            <task_system_state tag="tock">
                                <action type="assignment" variable="reward" value="0"/>
                                <action type="report" message="TOCK"/>
                                <transition type="yield"/>
                            </task_system_state>

                        </task_system>
                    </list>
                    
                    <task_system tag="StopIO_TS">
                        <task_system_state tag="StopIO_state">
                            <action type="stop_device_IO" device="s1_Fake_Monkey"/>
                            <transition type="yield"/>
                        </task_system_state>
                    </task_system> 
                </trial>
                
            </block>
        </protocol>
    </experiment>
</monkeyml>
