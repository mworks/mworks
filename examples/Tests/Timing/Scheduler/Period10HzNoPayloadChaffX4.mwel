%define interval = 100ms
%define num_executions = 400

var cancel_chaff_threads = false

%define start_chaff_thread (start_var)
    schedule (
        delay = interval
        duration = interval
        repeats = -999
        cancel = cancel_chaff_threads
        ) {
        assignment (
            variable = start_var
            value = now()
            )
        while (now() - start_var < interval - 100) {
            // Perform an assertion, rather than an assignment, so that we
            // can do continuous work without generating a ton of events
            assert (now() >= start_var)
        }
    }
%end

var chaff_start_1 = 0
var chaff_start_2 = 0
var chaff_start_3 = 0
var chaff_start_4 = 0

var num_completed = 0
var start_time = 0
var current_time = 0
var diff = 0


protocol 'Test Period 10Hz No Payload ChaffX4' {
    cancel_chaff_threads = false

    start_chaff_thread (chaff_start_1)
    start_chaff_thread (chaff_start_2)
    start_chaff_thread (chaff_start_3)
    start_chaff_thread (chaff_start_4)

    num_completed = 0
    start_time = now()

    schedule (
        delay = interval
        duration = interval
        repeats = num_executions
        ) {
        current_time = now()
        diff = current_time - (start_time + interval * (num_completed + 1))
        assert (diff < 1ms)
        num_completed += 1
    }

    wait_for_condition (
        condition = num_completed == num_executions
        timeout = (num_executions + 5) * interval
        )

    cancel_chaff_threads = true
}
